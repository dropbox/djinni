# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from example.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyEnum, CPyRecord

from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from item_list import ItemList
from item_list_helper import ItemListHelper
from sort_order import SortOrder
from textbox_listener import TextboxListener
from textbox_listener import TextboxListenerHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class SortItems(with_metaclass(ABCMeta)):
    @abstractmethod
    def sort(self, order, items):
        """ For the iOS / Android demo """
        raise NotImplementedError

    @staticmethod
    def create_with_listener(listener):
        return SortItemsCppProxy.create_with_listener(listener)
    @staticmethod
    def run_sort(items):
        """ For the localhost / command-line demo """
        return SortItemsCppProxy.run_sort(items)

class SortItemsCppProxy(SortItems):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.sort_items___wrapper_dec_ref(self._cpp_impl)

    def sort(self, order, items):
        lib.cw__sort_items_sort(self._cpp_impl, CPyEnum.fromPy(order), CPyRecord.fromPy(ItemList.c_data_set, items))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def create_with_listener(listener):
        _ret_c = lib.cw__sort_items_create_with_listener(TextboxListenerHelper.fromPy(listener))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = SortItemsHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def run_sort(items):
        _ret_c = lib.cw__sort_items_run_sort(CPyRecord.fromPy(ItemList.c_data_set, items))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(ItemList.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

class SortItemsHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return SortItemsCppProxy(obj)

