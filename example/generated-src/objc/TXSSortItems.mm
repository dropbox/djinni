// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from example.djinni

#import "TXSSortItems+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "TXSItemList+Private.h"
#import "TXSSortItems+Private.h"
#import "TXSTextboxListenerObjcProxy+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@implementation TXSSortItems

- (id)initWithCpp:(const std::shared_ptr<::textsort::SortItems> &)cppRef
{
    if (self = [super init]) {
        _cppRef = cppRef;
    }
    return self;
}

- (void)dealloc
{
    djinni::DbxCppWrapperCache<::textsort::SortItems> & cache = djinni::DbxCppWrapperCache<::textsort::SortItems>::getInstance();
    cache.remove(_cppRef);
}

+ (id)sortItemsWithCpp:(const std::shared_ptr<::textsort::SortItems> &)cppRef
{
    djinni::DbxCppWrapperCache<::textsort::SortItems> & cache = djinni::DbxCppWrapperCache<::textsort::SortItems>::getInstance();
    return cache.get(cppRef, [] (const std::shared_ptr<::textsort::SortItems> & p) { return [[TXSSortItems alloc] initWithCpp:p]; });
}

- (void)sort:(TXSItemList *)items {
    try {
        ::textsort::ItemList cppItems = std::move([items cppItemList]);
        _cppRef->sort(std::move(cppItems));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (TXSSortItems*)createWithListener:(id<TXSTextboxListener>)listener {
    try {
        std::shared_ptr<::textsort::TextboxListener> cppListener = ::djinni_generated::TextboxListenerObjcProxy::textbox_listener_with_objc(listener);
        std::shared_ptr<::textsort::SortItems> cppRet = ::textsort::SortItems::create_with_listener(std::move(cppListener));
        TXSSortItems* objcRet = [TXSSortItems sortItemsWithCpp:cppRet];
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

@end
