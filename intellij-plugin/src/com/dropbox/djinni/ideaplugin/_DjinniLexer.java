/*
 * Copyright 2015 Dropbox, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.3 on 8/12/15 1:36 PM */

package com.dropbox.djinni.ideaplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.dropbox.djinni.ideaplugin.psi.DjinniTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/12/15 1:36 PM from the specification file
 * <tt>/Users/jaetzold/src/idea/plugins/djinni/src/com/dropbox/djinni/ideaplugin/_DjinniLexer.flex</tt>
 */
public class _DjinniLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\2\1\3\1\1\1\1\22\0\1\1\1\0\1\7"+
    "\1\4\3\0\1\5\1\27\1\30\1\0\1\22\1\21\1\10\1\12"+
    "\1\0\12\11\1\17\1\20\1\25\1\16\1\26\1\0\1\31\32\15"+
    "\1\0\1\6\2\0\1\14\1\0\1\42\3\15\1\36\3\15\1\33"+
    "\2\15\1\32\1\43\1\41\1\37\1\40\2\15\1\34\1\35\6\15"+
    "\1\23\1\0\1\24\54\0\1\13\12\0\1\13\4\0\1\13\5\0"+
    "\27\13\1\0\37\13\1\0\u013f\13\31\0\162\13\4\0\14\13\16\0"+
    "\5\13\11\0\1\13\213\0\1\13\13\0\1\13\1\0\3\13\1\0"+
    "\1\13\1\0\24\13\1\0\54\13\1\0\46\13\1\0\5\13\4\0"+
    "\202\13\10\0\105\13\1\0\46\13\2\0\2\13\6\0\20\13\41\0"+
    "\46\13\2\0\1\13\7\0\47\13\110\0\33\13\5\0\3\13\56\0"+
    "\32\13\5\0\13\13\43\0\2\13\1\0\143\13\1\0\1\13\17\0"+
    "\2\13\7\0\2\13\12\0\3\13\2\0\1\13\20\0\1\13\1\0"+
    "\36\13\35\0\3\13\60\0\46\13\13\0\1\13\u0152\0\66\13\3\0"+
    "\1\13\22\0\1\13\7\0\12\13\43\0\10\13\2\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0\1\13\36\0"+
    "\2\13\1\0\3\13\16\0\2\13\23\0\6\13\4\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\2\13\1\0\2\13\37\0"+
    "\4\13\1\0\1\13\23\0\3\13\20\0\11\13\1\0\3\13\1\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\5\13\3\0\1\13\22\0"+
    "\1\13\17\0\2\13\43\0\10\13\2\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\2\13\1\0\5\13\3\0\1\13\36\0\2\13\1\0"+
    "\3\13\17\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13\1\0"+
    "\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0"+
    "\3\13\3\0\10\13\1\0\3\13\113\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\12\13\1\0\5\13\46\0\2\13\43\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\40\0"+
    "\1\13\1\0\2\13\43\0\10\13\1\0\3\13\1\0\27\13\1\0"+
    "\20\13\46\0\2\13\43\0\22\13\3\0\30\13\1\0\11\13\1\0"+
    "\1\13\2\0\7\13\72\0\60\13\1\0\2\13\14\0\7\13\72\0"+
    "\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0"+
    "\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0"+
    "\1\13\25\0\2\13\42\0\1\13\77\0\10\13\1\0\42\13\35\0"+
    "\4\13\164\0\42\13\1\0\5\13\1\0\2\13\45\0\6\13\112\0"+
    "\46\13\12\0\51\13\7\0\132\13\5\0\104\13\5\0\122\13\6\0"+
    "\7\13\1\0\77\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0"+
    "\1\13\1\0\4\13\2\0\47\13\1\0\1\13\1\0\4\13\2\0"+
    "\37\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0"+
    "\4\13\2\0\7\13\1\0\7\13\1\0\27\13\1\0\37\13\1\0"+
    "\1\13\1\0\4\13\2\0\7\13\1\0\47\13\1\0\23\13\105\0"+
    "\125\13\14\0\u026c\13\2\0\10\13\12\0\32\13\5\0\113\13\25\0"+
    "\15\13\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0"+
    "\3\13\17\0\64\13\43\0\1\13\4\0\1\13\103\0\130\13\10\0"+
    "\51\13\127\0\35\13\63\0\36\13\2\0\5\13\u038b\0\154\13\224\0"+
    "\234\13\4\0\132\13\6\0\26\13\2\0\6\13\2\0\46\13\2\0"+
    "\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0"+
    "\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0\3\13\1\0"+
    "\7\13\164\0\1\13\15\0\1\13\202\0\1\13\4\0\1\13\2\0"+
    "\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\4\13\1\0\3\13\1\0\7\13\3\0\3\13\5\0"+
    "\5\13\u0ebb\0\2\13\52\0\5\13\5\0\2\13\4\0\126\13\6\0"+
    "\3\13\1\0\132\13\1\0\4\13\5\0\50\13\4\0\136\13\21\0"+
    "\30\13\70\0\20\13\u0200\0\u19b6\13\112\0\u51a6\13\132\0\u048d\13\u0773\0"+
    "\u2ba4\13\u215c\0\u012e\13\2\0\73\13\225\0\7\13\14\0\5\13\5\0"+
    "\1\13\1\0\12\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0"+
    "\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0"+
    "\66\13\50\0\14\13\164\0\5\13\1\0\207\13\44\0\32\13\6\0"+
    "\32\13\13\0\131\13\3\0\6\13\2\0\6\13\2\0\6\13\2\0"+
    "\3\13\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\6\1\0"+
    "\1\24\3\0\2\5\4\6\1\24\1\6\1\25\1\6"+
    "\1\26\1\27\4\6\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[50];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\44\0\44\0\44\0\44"+
    "\0\44\0\44\0\44\0\44\0\44\0\44\0\44\0\44"+
    "\0\u01b0\0\u01d4\0\u01f8\0\u021c\0\264\0\44\0\u0240\0\330"+
    "\0\u0264\0\u0288\0\u0144\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\330"+
    "\0\u033c\0\u0168\0\u0360\0\u0168\0\u0168\0\u0384\0\u03a8\0\u03cc"+
    "\0\u03f0\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[50];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\13\1\32\2\13\1\33\3\13\1\34"+
    "\45\0\2\3\1\4\41\0\3\4\40\0\2\5\1\0"+
    "\41\5\5\35\1\36\1\37\35\35\6\40\1\41\1\36"+
    "\34\40\11\0\1\42\43\0\1\11\1\43\1\0\2\14"+
    "\14\0\12\14\11\0\1\43\43\0\1\13\2\0\2\13"+
    "\14\0\12\13\11\0\1\14\2\0\2\14\14\0\12\14"+
    "\11\0\1\13\2\0\2\13\14\0\1\13\1\44\10\13"+
    "\11\0\1\13\2\0\2\13\14\0\4\13\1\45\5\13"+
    "\11\0\1\13\2\0\2\13\14\0\6\13\1\46\3\13"+
    "\11\0\1\13\2\0\2\13\14\0\10\13\1\47\1\13"+
    "\2\35\1\0\41\35\6\40\1\41\1\50\34\40\11\0"+
    "\1\42\1\43\42\0\1\13\2\0\2\13\14\0\2\13"+
    "\1\51\7\13\11\0\1\13\2\0\2\13\14\0\3\13"+
    "\1\52\6\13\11\0\1\13\2\0\2\13\14\0\3\13"+
    "\1\53\6\13\11\0\1\13\2\0\2\13\14\0\6\13"+
    "\1\54\3\13\11\0\1\13\2\0\2\13\14\0\3\13"+
    "\1\55\6\13\11\0\1\13\2\0\2\13\14\0\1\13"+
    "\1\56\10\13\11\0\1\13\2\0\2\13\14\0\5\13"+
    "\1\57\4\13\11\0\1\13\2\0\2\13\14\0\7\13"+
    "\1\60\2\13\11\0\1\13\2\0\2\13\14\0\10\13"+
    "\1\61\1\13\11\0\1\13\2\0\2\13\14\0\1\62"+
    "\11\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1044];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\14\11\4\1\1\0\1\11\3\0"+
    "\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[50];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _DjinniLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DjinniLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17:
          { return LEFT_PARAM_BRACE;
          }
        case 25: break;
        case 14:
          { return RIGHT_BLOCK_BRACE;
          }
        case 26: break;
        case 4:
          { return COMMENT;
          }
        case 27: break;
        case 22:
          { return MAP;
          }
        case 28: break;
        case 6:
          { return IDENTIFIER;
          }
        case 29: break;
        case 24:
          { return OPTIONAL;
          }
        case 30: break;
        case 1:
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 31: break;
        case 12:
          { return PLUS;
          }
        case 32: break;
        case 11:
          { return LIST_SEPARATOR;
          }
        case 33: break;
        case 9:
          { return COLON;
          }
        case 34: break;
        case 20:
          { return STRING_LITERAL;
          }
        case 35: break;
        case 13:
          { return LEFT_BLOCK_BRACE;
          }
        case 36: break;
        case 19:
          { return AT;
          }
        case 37: break;
        case 21:
          { return SET;
          }
        case 38: break;
        case 23:
          { return LIST;
          }
        case 39: break;
        case 10:
          { return SEMICOLON;
          }
        case 40: break;
        case 18:
          { return RIGHT_PARAM_BRACE;
          }
        case 41: break;
        case 15:
          { return LEFT_GENERICS_BRACE;
          }
        case 42: break;
        case 16:
          { return RIGHT_GENERICS_BRACE;
          }
        case 43: break;
        case 8:
          { return EQ;
          }
        case 44: break;
        case 3:
          { return SPACE;
          }
        case 45: break;
        case 7:
          { return TEXT;
          }
        case 46: break;
        case 5:
          { return NUMBER_LITERAL;
          }
        case 47: break;
        case 2:
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 48: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
