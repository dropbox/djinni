// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_inheritance.djinni

package com.dropbox.djinni.test;

import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public abstract class InterfaceEncapsulator {
    public abstract void setCppObject(@CheckForNull BaseCppInterfaceInheritance object);

    @CheckForNull
    public abstract BaseCppInterfaceInheritance getCppObject();

    @CheckForNull
    public abstract BaseCppInterfaceInheritance subCppAsBaseCpp();

    public abstract void setObjcJavaObject(@CheckForNull BaseObjcJavaInterfaceInheritance object);

    @CheckForNull
    public abstract BaseObjcJavaInterfaceInheritance getObjcJavaObject();

    /**
     * Takes a sub interface object through a base interface argument, then cast the argument back to 
     * the sub interface. Returning null signifies failure.
     */
    @CheckForNull
    public abstract SubObjcJavaInterfaceInheritance castBaseArgToSub(@CheckForNull BaseObjcJavaInterfaceInheritance subAsBase);

    @CheckForNull
    public static native InterfaceEncapsulator create();

    private static final class CppProxy extends InterfaceEncapsulator
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        // InterfaceEncapsulator methods

        @Override
        public void setCppObject(BaseCppInterfaceInheritance object)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCppObject(this.nativeRef, object);
        }
        private native void native_setCppObject(long _nativeRef, BaseCppInterfaceInheritance object);

        @Override
        public BaseCppInterfaceInheritance getCppObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCppObject(this.nativeRef);
        }
        private native BaseCppInterfaceInheritance native_getCppObject(long _nativeRef);

        @Override
        public BaseCppInterfaceInheritance subCppAsBaseCpp()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_subCppAsBaseCpp(this.nativeRef);
        }
        private native BaseCppInterfaceInheritance native_subCppAsBaseCpp(long _nativeRef);

        @Override
        public void setObjcJavaObject(BaseObjcJavaInterfaceInheritance object)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setObjcJavaObject(this.nativeRef, object);
        }
        private native void native_setObjcJavaObject(long _nativeRef, BaseObjcJavaInterfaceInheritance object);

        @Override
        public BaseObjcJavaInterfaceInheritance getObjcJavaObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getObjcJavaObject(this.nativeRef);
        }
        private native BaseObjcJavaInterfaceInheritance native_getObjcJavaObject(long _nativeRef);

        @Override
        public SubObjcJavaInterfaceInheritance castBaseArgToSub(BaseObjcJavaInterfaceInheritance subAsBase)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_castBaseArgToSub(this.nativeRef, subAsBase);
        }
        private native SubObjcJavaInterfaceInheritance native_castBaseArgToSub(long _nativeRef, BaseObjcJavaInterfaceInheritance subAsBase);
    }
}
