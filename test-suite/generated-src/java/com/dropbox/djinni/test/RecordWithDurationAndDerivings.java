// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from duration.djinni

package com.dropbox.djinni.test;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public class RecordWithDurationAndDerivings implements Comparable<RecordWithDurationAndDerivings>, android.os.Parcelable {


    /*package*/ final java.time.Duration mDt;

    public RecordWithDurationAndDerivings(
            @Nonnull java.time.Duration dt) {
        this.mDt = dt;
    }

    @Nonnull
    public java.time.Duration getDt() {
        return mDt;
    }

    @Override
    public boolean equals(@CheckForNull Object obj) {
        if (!(obj instanceof RecordWithDurationAndDerivings)) {
            return false;
        }
        RecordWithDurationAndDerivings other = (RecordWithDurationAndDerivings) obj;
        return this.mDt.equals(other.mDt);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + (mDt.hashCode());
        return hashCode;
    }

    @Override
    public String toString() {
        return "RecordWithDurationAndDerivings{" +
                "mDt=" + mDt +
        "}";
    }


    public static final android.os.Parcelable.Creator<RecordWithDurationAndDerivings> CREATOR
        = new android.os.Parcelable.Creator<RecordWithDurationAndDerivings>()
    {
        @Override
        public RecordWithDurationAndDerivings createFromParcel(android.os.Parcel in)
        {
            return new RecordWithDurationAndDerivings(in);
        }

        @Override
        public RecordWithDurationAndDerivings[] newArray(int size)
        {
            return new RecordWithDurationAndDerivings[size];
        }
    };

    public RecordWithDurationAndDerivings(android.os.Parcel in)
    {
        this.mDt = java.time.Duration.parse(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        out.writeString(mDt.toString());
    }


    @Override
    public int compareTo(@Nonnull RecordWithDurationAndDerivings other)  {
        int tempResult;
        tempResult = this.mDt.compareTo(other.mDt);
        if (tempResult != 0) {
            return tempResult;
        }
        return 0;
    }
}
