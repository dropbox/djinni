// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from multiple_inheritance.djinni

package com.dropbox.djinni.test;

import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/** Used for C++ multiple inheritance tests */
public interface ReturnOne {
    public byte returnOne();

    @CheckForNull
    public static ReturnOne getInstance()
    {
        return CppProxy.getInstance();
    }

    static final class CppProxy implements ReturnOne
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public byte returnOne()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnOne(this.nativeRef);
        }
        private native byte native_returnOne(long _nativeRef);

        @CheckForNull
        public static native ReturnOne getInstance();
    }
}
