// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from foo_client_interface.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "foo_extensible_record.hpp"

#include "dh__foo_extensible_record.hpp"

static void(*s_py_callback_foo_extensible_record___delete)(DjinniRecordHandle * );
void foo_extensible_record_add_callback___delete(void(* ptr)(DjinniRecordHandle * )) {
    s_py_callback_foo_extensible_record___delete = ptr;
}

void foo_extensible_record___delete(DjinniRecordHandle * drh) {
    s_py_callback_foo_extensible_record___delete(drh);
}
void optional_foo_extensible_record___delete(DjinniOptionalRecordHandle * drh) {
    s_py_callback_foo_extensible_record___delete((DjinniRecordHandle *) drh); // can't static cast, find better way
}
static int32_t ( * s_py_callback_foo_extensible_record_get_foo_extensible_record_f1)(DjinniRecordHandle *);

void foo_extensible_record_add_callback_get_foo_extensible_record_f1(int32_t( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_foo_extensible_record_get_foo_extensible_record_f1 = ptr;
}

static DjinniString * ( * s_py_callback_foo_extensible_record_get_foo_extensible_record_f2)(DjinniRecordHandle *);

void foo_extensible_record_add_callback_get_foo_extensible_record_f2(DjinniString *( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_foo_extensible_record_get_foo_extensible_record_f2 = ptr;
}

static DjinniRecordHandle * ( * s_py_callback_foo_extensible_record_python_create_foo_extensible_record)(int32_t, DjinniString *);

void foo_extensible_record_add_callback_python_create_foo_extensible_record(DjinniRecordHandle *( * ptr)(int32_t, DjinniString *)) {
    s_py_callback_foo_extensible_record_python_create_foo_extensible_record = ptr;
}

djinni::Handle<DjinniRecordHandle> DjinniFooExtensibleRecord::fromCpp(const ::testsuite::FooExtensibleRecord& dr) {
    auto  _field_string1 = DjinniString::fromCpp(dr.string1);

    djinni::Handle<DjinniRecordHandle> _aux(
        s_py_callback_foo_extensible_record_python_create_foo_extensible_record(
            dr.number1,
            _field_string1.release()),
        foo_extensible_record___delete);
    return _aux;
}

::testsuite::FooExtensibleRecord DjinniFooExtensibleRecord::toCpp(djinni::Handle<DjinniRecordHandle> dh) {
    std::unique_ptr<DjinniString> _field_string1(s_py_callback_foo_extensible_record_get_foo_extensible_record_f2(dh.get()));

    auto _aux = ::testsuite::FooExtensibleRecord(
        s_py_callback_foo_extensible_record_get_foo_extensible_record_f1(dh.get()),
        DjinniString::toCpp(std::move( _field_string1)));
    return _aux;
}

djinni::Handle<DjinniOptionalRecordHandle> DjinniFooExtensibleRecord::fromCpp(std::experimental::optional<::testsuite::FooExtensibleRecord> dc) {
    if (dc == std::experimental::nullopt) {
        return nullptr;
    }
    return djinni::optionals::toOptionalHandle(DjinniFooExtensibleRecord::fromCpp(std::move(* dc)), optional_foo_extensible_record___delete);
}

std::experimental::optional<::testsuite::FooExtensibleRecord>DjinniFooExtensibleRecord::toCpp(djinni::Handle<DjinniOptionalRecordHandle> dh) {
     if (dh) {
        return std::experimental::optional<::testsuite::FooExtensibleRecord>(DjinniFooExtensibleRecord::toCpp(djinni::optionals::fromOptionalHandle(std::move(dh), foo_extensible_record___delete)));
    }
    return std::experimental::nullopt;
}

