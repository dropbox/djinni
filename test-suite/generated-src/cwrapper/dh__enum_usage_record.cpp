// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "enum_usage_record.hpp"

#include "color.hpp"
#include "dh__color.hpp"
#include "dh__enum_usage_record.hpp"
#include "dh__list_enum_color.hpp"
#include "dh__map_enum_color_enum_color.hpp"
#include "dh__set_enum_color.hpp"
#include <experimental/optional>

static void(*s_py_callback_enum_usage_record___delete)(DjinniRecordHandle * );
void enum_usage_record_add_callback___delete(void(* ptr)(DjinniRecordHandle * )) {
    s_py_callback_enum_usage_record___delete = ptr;
}

void enum_usage_record___delete(DjinniRecordHandle * drh) {
    s_py_callback_enum_usage_record___delete(drh);
}
void optional_enum_usage_record___delete(DjinniOptionalRecordHandle * drh) {
    s_py_callback_enum_usage_record___delete((DjinniRecordHandle *) drh); // can't static cast, find better way
}
static int ( * s_py_callback_enum_usage_record_get_enum_usage_record_f1)(DjinniRecordHandle *);

void enum_usage_record_add_callback_get_enum_usage_record_f1(int( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_enum_usage_record_get_enum_usage_record_f1 = ptr;
}

static int ( * s_py_callback_enum_usage_record_get_enum_usage_record_f2)(DjinniRecordHandle *);

void enum_usage_record_add_callback_get_enum_usage_record_f2(int( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_enum_usage_record_get_enum_usage_record_f2 = ptr;
}

static DjinniObjectHandle * ( * s_py_callback_enum_usage_record_get_enum_usage_record_f3)(DjinniRecordHandle *);

void enum_usage_record_add_callback_get_enum_usage_record_f3(DjinniObjectHandle *( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_enum_usage_record_get_enum_usage_record_f3 = ptr;
}

static DjinniObjectHandle * ( * s_py_callback_enum_usage_record_get_enum_usage_record_f4)(DjinniRecordHandle *);

void enum_usage_record_add_callback_get_enum_usage_record_f4(DjinniObjectHandle *( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_enum_usage_record_get_enum_usage_record_f4 = ptr;
}

static DjinniObjectHandle * ( * s_py_callback_enum_usage_record_get_enum_usage_record_f5)(DjinniRecordHandle *);

void enum_usage_record_add_callback_get_enum_usage_record_f5(DjinniObjectHandle *( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_enum_usage_record_get_enum_usage_record_f5 = ptr;
}

static DjinniRecordHandle * ( * s_py_callback_enum_usage_record_python_create_enum_usage_record)(int, int, DjinniObjectHandle *, DjinniObjectHandle *, DjinniObjectHandle *);

void enum_usage_record_add_callback_python_create_enum_usage_record(DjinniRecordHandle *( * ptr)(int, int, DjinniObjectHandle *, DjinniObjectHandle *, DjinniObjectHandle *)) {
    s_py_callback_enum_usage_record_python_create_enum_usage_record = ptr;
}

djinni::Handle<DjinniRecordHandle> DjinniEnumUsageRecord::fromCpp(const ::testsuite::EnumUsageRecord& dr) {
    auto  _field_l = DjinniListEnumColor::fromCpp(dr.l);
    auto  _field_s = DjinniSetEnumColor::fromCpp(dr.s);
    auto  _field_m = DjinniMapEnumColorEnumColor::fromCpp(dr.m);

    djinni::Handle<DjinniRecordHandle> _aux(
        s_py_callback_enum_usage_record_python_create_enum_usage_record(
            int32_from_enum_color(dr.e),
            int32_from_enum_color(dr.o),
            _field_l.release(),
            _field_s.release(),
            _field_m.release()),
        enum_usage_record___delete);
    return _aux;
}

::testsuite::EnumUsageRecord DjinniEnumUsageRecord::toCpp(djinni::Handle<DjinniRecordHandle> dh) {
    djinni::Handle<DjinniObjectHandle> _field_l(s_py_callback_enum_usage_record_get_enum_usage_record_f3(dh.get()), list_enum_color___delete);
    djinni::Handle<DjinniObjectHandle> _field_s(s_py_callback_enum_usage_record_get_enum_usage_record_f4(dh.get()), set_enum_color___delete);
    djinni::Handle<DjinniObjectHandle> _field_m(s_py_callback_enum_usage_record_get_enum_usage_record_f5(dh.get()), map_enum_color_enum_color___delete);

    auto _aux = ::testsuite::EnumUsageRecord(
        static_cast<::testsuite::color>(s_py_callback_enum_usage_record_get_enum_usage_record_f1(dh.get())),
        get_boxed_enum_color_from_int32(s_py_callback_enum_usage_record_get_enum_usage_record_f2(dh.get())),
        DjinniListEnumColor::toCpp(std::move( _field_l)),
        DjinniSetEnumColor::toCpp(std::move( _field_s)),
        DjinniMapEnumColorEnumColor::toCpp(std::move( _field_m)));
    return _aux;
}

djinni::Handle<DjinniOptionalRecordHandle> DjinniEnumUsageRecord::fromCpp(std::experimental::optional<::testsuite::EnumUsageRecord> dc) {
    if (dc == std::experimental::nullopt) {
        return nullptr;
    }
    return djinni::optionals::toOptionalHandle(DjinniEnumUsageRecord::fromCpp(std::move(* dc)), optional_enum_usage_record___delete);
}

std::experimental::optional<::testsuite::EnumUsageRecord>DjinniEnumUsageRecord::toCpp(djinni::Handle<DjinniOptionalRecordHandle> dh) {
     if (dh) {
        return std::experimental::optional<::testsuite::EnumUsageRecord>(DjinniEnumUsageRecord::toCpp(djinni::optionals::fromOptionalHandle(std::move(dh), enum_usage_record___delete)));
    }
    return std::experimental::nullopt;
}

