// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "conflict_user.hpp"

#include "cw__Conflict.hpp"
#include "cw__conflict_user.hpp"
#include "dh__set_interface_Conflict.hpp"

std::shared_ptr<::testsuite::ConflictUser> DjinniWrapperConflictUser::get(djinni::WrapperRef<DjinniWrapperConflictUser> dw) {
    if (dw) {
        return dw->wrapped_obj;
    }
    return nullptr;
}

void conflict_user___wrapper_add_ref(DjinniWrapperConflictUser * dh) {
    dh->ref_count.fetch_add(1);
}
void conflict_user___wrapper_dec_ref(DjinniWrapperConflictUser * dh) {
    const size_t ref = dh->ref_count.fetch_sub(1);
    if (ref == 1) {// value before sub is returned
        delete dh;
    }
}
djinni::Handle<DjinniWrapperConflictUser> DjinniWrapperConflictUser::wrap(std::shared_ptr<::testsuite::ConflictUser> obj) {
    if (obj)
        return djinni::Handle<DjinniWrapperConflictUser>(new DjinniWrapperConflictUser{ std::move(obj) }, conflict_user___wrapper_dec_ref);
    return nullptr;
}

DjinniWrapperConflict * cw__conflict_user_Conflict(DjinniWrapperConflictUser * djinni_this) {
    try {
        return DjinniWrapperConflict::wrap(djinni_this->wrapped_obj->Conflict()).release();
    } CW_TRANSLATE_EXCEPTIONS_RETURN(0);
}

bool cw__conflict_user_conflict_arg(DjinniWrapperConflictUser * djinni_this, DjinniObjectHandle * cs) {
    djinni::Handle<DjinniObjectHandle> _cs(cs, set_interface_Conflict___delete);
    try {
        return djinni_this->wrapped_obj->conflict_arg(DjinniSetInterfaceConflict::toCpp(std::move(_cs)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN(0);
}
