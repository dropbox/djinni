// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from single_language_interfaces.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "uses_single_language_listeners.hpp"

#include "cw__java_only_listener.hpp"
#include "cw__objc_only_listener.hpp"
#include "cw__py_only_listener.hpp"
#include "cw__uses_single_language_listeners.hpp"

std::shared_ptr<::testsuite::UsesSingleLanguageListeners> DjinniWrapperUsesSingleLanguageListeners::get(djinni::WrapperRef<DjinniWrapperUsesSingleLanguageListeners> dw) {
    if (dw) {
        return dw->wrapped_obj;
    }
    return nullptr;
}

void uses_single_language_listeners___wrapper_add_ref(DjinniWrapperUsesSingleLanguageListeners * dh) {
    dh->ref_count.fetch_add(1);
}
void uses_single_language_listeners___wrapper_dec_ref(DjinniWrapperUsesSingleLanguageListeners * dh) {
    const size_t ref = dh->ref_count.fetch_sub(1);
    if (ref == 1) {// value before sub is returned
        delete dh;
    }
}
djinni::Handle<DjinniWrapperUsesSingleLanguageListeners> DjinniWrapperUsesSingleLanguageListeners::wrap(std::shared_ptr<::testsuite::UsesSingleLanguageListeners> obj) {
    if (obj)
        return djinni::Handle<DjinniWrapperUsesSingleLanguageListeners>(new DjinniWrapperUsesSingleLanguageListeners{ std::move(obj) }, uses_single_language_listeners___wrapper_dec_ref);
    return nullptr;
}

void cw__uses_single_language_listeners_callForObjC(DjinniWrapperUsesSingleLanguageListeners * djinni_this, DjinniWrapperObjcOnlyListener * l) {
    djinni::Handle<DjinniWrapperObjcOnlyListener> _l(l, objc_only_listener___wrapper_dec_ref);
    try {
        djinni_this->wrapped_obj->callForObjC(DjinniWrapperObjcOnlyListener::get(std::move(_l)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

DjinniWrapperObjcOnlyListener * cw__uses_single_language_listeners_returnForObjC(DjinniWrapperUsesSingleLanguageListeners * djinni_this) {
    try {
        return DjinniWrapperObjcOnlyListener::wrap(djinni_this->wrapped_obj->returnForObjC()).release();
    } CW_TRANSLATE_EXCEPTIONS_RETURN(0);
}

void cw__uses_single_language_listeners_callForJava(DjinniWrapperUsesSingleLanguageListeners * djinni_this, DjinniWrapperJavaOnlyListener * l) {
    djinni::Handle<DjinniWrapperJavaOnlyListener> _l(l, java_only_listener___wrapper_dec_ref);
    try {
        djinni_this->wrapped_obj->callForJava(DjinniWrapperJavaOnlyListener::get(std::move(_l)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

void cw__uses_single_language_listeners_callForPy(DjinniWrapperUsesSingleLanguageListeners * djinni_this, DjinniWrapperPyOnlyListener * l) {
    djinni::Handle<DjinniWrapperPyOnlyListener> _l(l, py_only_listener___wrapper_dec_ref);
    try {
        djinni_this->wrapped_obj->callForPy(DjinniWrapperPyOnlyListener::get(std::move(_l)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

DjinniWrapperPyOnlyListener * cw__uses_single_language_listeners_returnForPy(DjinniWrapperUsesSingleLanguageListeners * djinni_this) {
    try {
        return DjinniWrapperPyOnlyListener::wrap(djinni_this->wrapped_obj->returnForPy()).release();
    } CW_TRANSLATE_EXCEPTIONS_RETURN(0);
}
