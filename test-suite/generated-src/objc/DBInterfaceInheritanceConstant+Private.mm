// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_inheritance.djinni

#import "DBInterfaceInheritanceConstant+Private.h"
#import "DBInterfaceInheritanceConstant.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBInterfaceInheritanceConstantCppProxy : NSObject<DBInterfaceInheritanceConstant>

- (id)initWithCpp:(const std::shared_ptr<::testsuite::InterfaceInheritanceConstant>&)cppRef;

@end

@implementation DBInterfaceInheritanceConstantCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::testsuite::InterfaceInheritanceConstant>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::testsuite::InterfaceInheritanceConstant>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (const std::shared_ptr<::testsuite::InterfaceInheritanceConstant>&) cppRef
{
    return _cppRefHandle.get();
}

// DBInterfaceInheritanceConstantCppProxy methods


namespace djinni_generated {

class InterfaceInheritanceConstant::ObjcProxy final
: public ::testsuite::InterfaceInheritanceConstant
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;

    // InterfaceInheritanceConstant methods
};

}  // namespace djinni_generated

namespace djinni_generated {

auto InterfaceInheritanceConstant::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[DBInterfaceInheritanceConstantCppProxy class]]) {
        return ((DBInterfaceInheritanceConstantCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto InterfaceInheritanceConstant::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<DBInterfaceInheritanceConstantCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
