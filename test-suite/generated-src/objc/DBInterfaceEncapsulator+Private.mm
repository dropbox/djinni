// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_inheritance.djinni

#import "DBInterfaceEncapsulator+Private.h"
#import "DBInterfaceEncapsulator.h"
#import "DBBaseCppInterfaceInheritance+Private.h"
#import "DBBaseObjcJavaInterfaceInheritance+Private.h"
#import "DBSubObjcJavaInterfaceInheritance+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBInterfaceEncapsulator ()

- (id)initWithCpp:(const std::shared_ptr<::testsuite::InterfaceEncapsulator>&)cppRef;

@end

@implementation DBInterfaceEncapsulator {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::testsuite::InterfaceEncapsulator>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::testsuite::InterfaceEncapsulator>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (const std::shared_ptr<::testsuite::InterfaceEncapsulator>&) cppRef
{
    return _cppRefHandle.get();
}

// DBInterfaceEncapsulator methods

- (void)setCppObject:(nullable DBBaseCppInterfaceInheritance *)object {
    try {
        _cppRefHandle.get()->set_cpp_object(::djinni_generated::BaseCppInterfaceInheritance::toCpp(object));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable DBBaseCppInterfaceInheritance *)getCppObject {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_cpp_object();
        return ::djinni_generated::BaseCppInterfaceInheritance::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable DBBaseCppInterfaceInheritance *)subCppAsBaseCpp {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sub_cpp_as_base_cpp();
        return ::djinni_generated::BaseCppInterfaceInheritance::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setObjcJavaObject:(nullable id<DBBaseObjcJavaInterfaceInheritance>)object {
    try {
        _cppRefHandle.get()->set_objc_java_object(::djinni_generated::BaseObjcJavaInterfaceInheritance::toCpp(object));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<DBBaseObjcJavaInterfaceInheritance>)getObjcJavaObject {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_objc_java_object();
        return ::djinni_generated::BaseObjcJavaInterfaceInheritance::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<DBSubObjcJavaInterfaceInheritance>)castBaseArgToSub:(nullable id<DBBaseObjcJavaInterfaceInheritance>)subAsBase {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->cast_base_arg_to_sub(::djinni_generated::BaseObjcJavaInterfaceInheritance::toCpp(subAsBase));
        return ::djinni_generated::SubObjcJavaInterfaceInheritance::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable DBInterfaceEncapsulator *)create {
    try {
        auto objcpp_result_ = ::testsuite::InterfaceEncapsulator::create();
        return ::djinni_generated::InterfaceEncapsulator::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto InterfaceEncapsulator::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return [objc cppRef];
}

auto InterfaceEncapsulator::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DBInterfaceEncapsulator>(cpp);
}

}  // namespace djinni_generated

@end
