# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from multiple_inheritance.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive

from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class ReturnOne(with_metaclass(ABCMeta)):
    """ Used for C++ multiple inheritance tests """

    @abstractmethod
    def return_one(self):
        raise NotImplementedError

    @staticmethod
    def get_instance():
        return ReturnOneCppProxy.get_instance()

class ReturnOneCppProxy(ReturnOne):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.return_one___wrapper_dec_ref(self._cpp_impl)

    @staticmethod
    def get_instance():
        _ret_c = lib.cw__return_one_get_instance()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = ReturnOneHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def return_one(self):
        _ret_c = lib.cw__return_one_return_one(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

class ReturnOneHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return ReturnOneCppProxy(obj)

