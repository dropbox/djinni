# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from primitive_list.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyPrimitive
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class ListInt64THelper:
    c_data_set = MultiSet()

    @staticmethod
    def check_c_data_set_empty():
        assert len(ListInt64THelper.c_data_set) == 0

    @ffi.callback("int64_t(struct DjinniObjectHandle *, size_t)")
    def __get_elem(cself, index):
        try:
            _ret = CPyPrimitive.fromPy(CPyObject.toPy(None, cself)[index])
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("size_t(struct DjinniObjectHandle *)")
    def __get_size(cself):
        return len(CPyObject.toPy(None, cself))

    @ffi.callback("struct DjinniObjectHandle *()")
    def __python_create():
        c_ptr = ffi.new_handle(list())
        ListInt64THelper.c_data_set.add(c_ptr)
        return ffi.cast("struct DjinniObjectHandle *", c_ptr)

    @ffi.callback("void(struct DjinniObjectHandle *, int64_t)")
    def __python_add(cself, el):
        CPyObject.toPy(None, cself).append(CPyPrimitive.toPy(el))

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in ListInt64THelper.c_data_set
        ListInt64THelper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():
        lib.list_int64_t_add_callback__get_elem(ListInt64THelper.__get_elem)
        lib.list_int64_t_add_callback___delete(ListInt64THelper.__delete)
        lib.list_int64_t_add_callback__get_size(ListInt64THelper.__get_size)
        lib.list_int64_t_add_callback__python_create(ListInt64THelper.__python_create)
        lib.list_int64_t_add_callback__python_add(ListInt64THelper.__python_add)

ListInt64THelper._add_callbacks()

