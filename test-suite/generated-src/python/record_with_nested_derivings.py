# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from derivings.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive, CPyRecord

from record_with_derivings import RecordWithDerivings
from record_with_derivings_helper import RecordWithDerivingsHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class RecordWithNestedDerivings:
    c_data_set = MultiSet()

    @staticmethod
    def check_c_data_set_empty():
        assert len(RecordWithNestedDerivings.c_data_set) == 0
        RecordWithDerivings.check_c_data_set_empty()

    # Record deriving types
    def __eq__(self, other):
        return self.key==other.key and \
        self.rec.__eq__(other.rec)
    def __lt__(self, other):
        if self.key<other.key:
            return True
        if self.key>other.key:
            return False
        if self.rec.__lt__(other.rec):
            return True
        if self.rec.__gt__(other.rec):
            return False
        return False
    def __le__(self, other):
        return not other.__lt__(self)
    def __ge__(self, other):
        return not self.__lt__(other)
    def __gt__(self, other):
        return other.__lt__(self)
    def __hash__(self):
        # Pick an arbitrary non-zero starting value
        hash_code = 17
        hash_code = hash_code * 31 + self.key.__hash__()
        hash_code = hash_code * 31 + self.rec.__hash__()
        return hash_code

    def __init__(self, key, rec):
        self.key = key
        self.rec = rec

