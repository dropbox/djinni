# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_duplicate_file_creation.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyRecord

from Foo_Record import FooRecord
from Foo_Record_helper import FooRecordHelper
from abc import ABCMeta, abstractmethod
from dh__list_record_Foo_Record import ListRecordFooRecordHelper
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class FooCallback2(with_metaclass(ABCMeta)):
    @abstractmethod
    def methodA(self, records):
        raise NotImplementedError

    @abstractmethod
    def methodB(self, records):
        raise NotImplementedError


class FooCallback2CallbacksHelper():
    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniObjectHandle *)")
    def methodA(cself, records):
        try:
            FooCallback2Helper.selfToPy(cself).methodA(CPyObject.toPy(ListRecordFooRecordHelper.c_data_set, records))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniObjectHandle *)")
    def methodB(cself, records):
        try:
            FooCallback2Helper.selfToPy(cself).methodB(CPyObject.toPy(ListRecordFooRecordHelper.c_data_set, records))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in FooCallback2Helper.c_data_set
        FooCallback2Helper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():
        lib.Foo_Callback2_add_callback_methodA(FooCallback2CallbacksHelper.methodA)
        lib.Foo_Callback2_add_callback_methodB(FooCallback2CallbacksHelper.methodB)

        lib.Foo_Callback2_add_callback___delete(FooCallback2CallbacksHelper.__delete)

FooCallback2CallbacksHelper._add_callbacks()

class FooCallback2Helper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        # Python Objects can be returned without being wrapped in proxies
        py_handle = lib.get_handle_from_proxy_object_cw__Foo_Callback2(obj)
        if py_handle:
            assert py_handle in FooCallback2Helper.c_data_set
            aux = ffi.from_handle(ffi.cast("void * ", py_handle))
            lib.Foo_Callback2___wrapper_dec_ref(obj)
            return aux
        return FooCallback2CppProxy(obj)

    @staticmethod
    def selfToPy(obj):
        assert obj in FooCallback2Helper.c_data_set
        return ffi.from_handle(ffi.cast("void * ",obj))

    @staticmethod
    def fromPy(py_obj):
        if py_obj is None:
            return ffi.NULL
        py_proxy = (py_obj)
        if not hasattr(py_obj, "methodA"):
            raise TypeError
        if not hasattr(py_obj, "methodB"):
            raise TypeError

        bare_c_ptr = ffi.new_handle(py_proxy)
        FooCallback2Helper.c_data_set.add(bare_c_ptr)
        wrapped_c_ptr = lib.make_proxy_object_from_handle_cw__Foo_Callback2(bare_c_ptr)
        return wrapped_c_ptr
