# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from enum.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyEnum, CPyObject, CPyObject, CPyObjectProxy

from abc import ABCMeta, abstractmethod
from color import Color
from dh__list_enum_color import ListEnumColorHelper
from dh__map_enum_color_enum_color import MapEnumColorEnumColorHelper
from dh__map_enum_color_enum_color import MapEnumColorEnumColorProxy
from dh__set_enum_color import SetEnumColorHelper
from dh__set_enum_color import SetEnumColorProxy
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class EnumUsageInterface(with_metaclass(ABCMeta)):
    @abstractmethod
    def e(self, e):
        raise NotImplementedError

    @abstractmethod
    def o(self, o):
        raise NotImplementedError

    @abstractmethod
    def l(self, l):
        raise NotImplementedError

    @abstractmethod
    def s(self, s):
        raise NotImplementedError

    @abstractmethod
    def m(self, m):
        raise NotImplementedError


class EnumUsageInterfaceCppProxy(EnumUsageInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.enum_usage_interface___wrapper_dec_ref(self._cpp_impl)

    def e(self, e):
        _ret_c = lib.cw__enum_usage_interface_e(self._cpp_impl, CPyEnum.fromPy(e))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyEnum.toPy(Color, _ret_c)
        assert _ret.value != -1
        return _ret

    def o(self, o):
        _ret_c = lib.cw__enum_usage_interface_o(self._cpp_impl, CPyEnum.fromPyOpt(o))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyEnum.toPyOpt(Color, _ret_c)
        return _ret

    def l(self, l):
        _ret_c = lib.cw__enum_usage_interface_l(self._cpp_impl, CPyObject.fromPy(ListEnumColorHelper.c_data_set, l))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObject.toPy(ListEnumColorHelper.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    def s(self, s):
        _ret_c = lib.cw__enum_usage_interface_s(self._cpp_impl, CPyObjectProxy.fromPy(SetEnumColorHelper.c_data_set, SetEnumColorProxy(s)))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObjectProxy.toPyObj(SetEnumColorHelper.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    def m(self, m):
        _ret_c = lib.cw__enum_usage_interface_m(self._cpp_impl, CPyObjectProxy.fromPy(MapEnumColorEnumColorHelper.c_data_set, MapEnumColorEnumColorProxy(m)))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObjectProxy.toPyObj(MapEnumColorEnumColorHelper.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

class EnumUsageInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return EnumUsageInterfaceCppProxy(obj)

