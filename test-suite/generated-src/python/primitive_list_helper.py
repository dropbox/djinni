# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from primitive_list.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyPrimitive, CPyRecord

from dh__list_int64_t import ListInt64THelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from primitive_list import PrimitiveList

class PrimitiveListHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_primitive_list_f1(cself):
        try:
            _ret = CPyObject.fromPy(ListInt64THelper.c_data_set, CPyRecord.toPy(None, cself).list)
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(struct DjinniObjectHandle *)")
    def python_create_primitive_list(list):
        py_rec = PrimitiveList(
            CPyObject.toPy(ListInt64THelper.c_data_set, list))
        return CPyRecord.fromPy(PrimitiveList.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in PrimitiveList.c_data_set
        PrimitiveList.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.primitive_list_add_callback_get_primitive_list_f1(PrimitiveListHelper.get_primitive_list_f1)
        lib.primitive_list_add_callback___delete(PrimitiveListHelper.__delete)
        lib.primitive_list_add_callback_python_create_primitive_list(PrimitiveListHelper.python_create_primitive_list)

PrimitiveListHelper._add_callbacks()

