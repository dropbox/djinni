# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from multiple_inheritance.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files


from abc import ABCMeta, abstractmethod
from first_listener import FirstListener
from first_listener import FirstListenerHelper
from future.utils import with_metaclass
from second_listener import SecondListener
from second_listener import SecondListenerHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class ListenerCaller(with_metaclass(ABCMeta)):
    """
     Tester for the ability to call two interfaces which might be
     implemented on the same object.  That's not relevant in all
     languages, due to the details of multiple inheritance and object
     comparison.
    """

    @abstractmethod
    def callFirst(self):
        raise NotImplementedError

    @abstractmethod
    def callSecond(self):
        raise NotImplementedError

    @staticmethod
    def init(first_l, second_l):
        return ListenerCallerCppProxy.init(first_l, second_l)

class ListenerCallerCppProxy(ListenerCaller):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.listener_caller___wrapper_dec_ref(self._cpp_impl)

    @staticmethod
    def init(first_l, second_l):
        _ret_c = lib.cw__listener_caller_init(FirstListenerHelper.fromPy(first_l), SecondListenerHelper.fromPy(second_l))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = ListenerCallerHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def callFirst(self):
        lib.cw__listener_caller_callFirst(self._cpp_impl)
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def callSecond(self):
        lib.cw__listener_caller_callSecond(self._cpp_impl)
        CPyException.toPyCheckAndRaise(ffi.NULL)

class ListenerCallerHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return ListenerCallerCppProxy(obj)

