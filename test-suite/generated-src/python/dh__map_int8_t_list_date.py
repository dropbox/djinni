# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_containers.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyDate, CPyObject, CPyObject, CPyObjectProxy, CPyPrimitive

from dh__list_date import ListDateHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class MapInt8TListDateHelper:
    c_data_set = MultiSet()

    @staticmethod
    def check_c_data_set_empty():
        assert len(MapInt8TListDateHelper.c_data_set) == 0
        ListDateHelper.check_c_data_set_empty()

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniObjectHandle *, int8_t)")
    def __get_value(cself, key):
        pyKey = CPyPrimitive.toPy(key)
        assert pyKey is not None
        try:
            _ret = CPyObject.fromPy(ListDateHelper.c_data_set, CPyObjectProxy.toPyObj(None, cself)[pyKey])
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("size_t(struct DjinniObjectHandle *)")
    def __get_size(cself):
        return len(CPyObjectProxy.toPyObj(None, cself))

    @ffi.callback("struct DjinniObjectHandle *()")
    def __python_create():
        c_ptr = ffi.new_handle(MapInt8TListDateProxy(dict()))
        MapInt8TListDateHelper.c_data_set.add(c_ptr)
        return ffi.cast("struct DjinniObjectHandle *", c_ptr)

    @ffi.callback("void(struct DjinniObjectHandle *, int8_t, struct DjinniObjectHandle *)")
    def __python_add(cself, key, value):
        CPyObjectProxy.toPyObj(None, cself)[CPyPrimitive.toPy(key)] = CPyObject.toPy(ListDateHelper.c_data_set, value)

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in MapInt8TListDateHelper.c_data_set
        MapInt8TListDateHelper.c_data_set.remove(c_ptr)

    @ffi.callback("int8_t(struct DjinniObjectHandle *)")
    def __python_next(cself):
        try:
            _ret = CPyPrimitive.fromPy(next(CPyObjectProxy.toPyIter(cself)))
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @staticmethod
    def _add_callbacks():
        lib.map_int8_t_list_date_add_callback__get_value(MapInt8TListDateHelper.__get_value)
        lib.map_int8_t_list_date_add_callback___delete(MapInt8TListDateHelper.__delete)
        lib.map_int8_t_list_date_add_callback__get_size(MapInt8TListDateHelper.__get_size)
        lib.map_int8_t_list_date_add_callback__python_create(MapInt8TListDateHelper.__python_create)
        lib.map_int8_t_list_date_add_callback__python_add(MapInt8TListDateHelper.__python_add)
        lib.map_int8_t_list_date_add_callback__python_next(MapInt8TListDateHelper.__python_next)

MapInt8TListDateHelper._add_callbacks()

class MapInt8TListDateProxy:
    def iter(d):
        for k in d:
            yield k

    def __init__(self, py_obj):
        self._py_obj = py_obj
        if py_obj is not None:
            self._py_iter = iter(py_obj)
        else:
            self._py_iter = None
