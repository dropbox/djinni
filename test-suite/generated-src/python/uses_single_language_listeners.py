# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from single_language_interfaces.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files


from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from java_only_listener import JavaOnlyListener
from java_only_listener import JavaOnlyListenerHelper
from objc_only_listener import ObjcOnlyListener
from objc_only_listener import ObjcOnlyListenerHelper
from py_only_listener import PyOnlyListener
from py_only_listener import PyOnlyListenerHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class UsesSingleLanguageListeners(with_metaclass(ABCMeta)):
    """
     Generating and compiling this makes sure other languages don't break
     on references to interfaces they don't need.
    """

    @abstractmethod
    def callForObjC(self, l):
        raise NotImplementedError

    @abstractmethod
    def returnForObjC(self):
        raise NotImplementedError

    @abstractmethod
    def callForJava(self, l):
        raise NotImplementedError

    @abstractmethod
    def callForPy(self, l):
        raise NotImplementedError

    @abstractmethod
    def returnForPy(self):
        raise NotImplementedError


class UsesSingleLanguageListenersCppProxy(UsesSingleLanguageListeners):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.uses_single_language_listeners___wrapper_dec_ref(self._cpp_impl)

    def callForObjC(self, l):
        lib.cw__uses_single_language_listeners_callForObjC(self._cpp_impl, ObjcOnlyListenerHelper.fromPy(l))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def returnForObjC(self):
        _ret_c = lib.cw__uses_single_language_listeners_returnForObjC(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = ObjcOnlyListenerHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def callForJava(self, l):
        lib.cw__uses_single_language_listeners_callForJava(self._cpp_impl, JavaOnlyListenerHelper.fromPy(l))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def callForPy(self, l):
        lib.cw__uses_single_language_listeners_callForPy(self._cpp_impl, PyOnlyListenerHelper.fromPy(l))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def returnForPy(self):
        _ret_c = lib.cw__uses_single_language_listeners_returnForPy(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = PyOnlyListenerHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

class UsesSingleLanguageListenersHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return UsesSingleLanguageListenersCppProxy(obj)

