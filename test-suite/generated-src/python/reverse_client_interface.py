# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from client_interface.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyString

from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class ReverseClientInterface(with_metaclass(ABCMeta)):
    @abstractmethod
    def return_str(self):
        raise NotImplementedError

    @abstractmethod
    def meth_taking_interface(self, i):
        raise NotImplementedError

    @abstractmethod
    def meth_taking_optional_interface(self, i):
        raise NotImplementedError

    @staticmethod
    def create():
        return ReverseClientInterfaceCppProxy.create()

class ReverseClientInterfaceCppProxy(ReverseClientInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.reverse_client_interface___wrapper_dec_ref(self._cpp_impl)

    def return_str(self):
        _ret_c = lib.cw__reverse_client_interface_return_str(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyString.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def meth_taking_interface(self, i):
        _ret_c = lib.cw__reverse_client_interface_meth_taking_interface(self._cpp_impl, ReverseClientInterfaceHelper.fromPy(i))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyString.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def meth_taking_optional_interface(self, i):
        _ret_c = lib.cw__reverse_client_interface_meth_taking_optional_interface(self._cpp_impl, ReverseClientInterfaceHelper.fromPy(i))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyString.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def create():
        _ret_c = lib.cw__reverse_client_interface_create()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = ReverseClientInterfaceHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

class ReverseClientInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return ReverseClientInterfaceCppProxy(obj)

