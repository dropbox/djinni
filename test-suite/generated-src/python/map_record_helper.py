# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from map.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyObjectProxy, CPyPrimitive, CPyRecord, CPyString

from dh__map_int32_t_int32_t import MapInt32TInt32THelper
from dh__map_int32_t_int32_t import MapInt32TInt32TProxy
from dh__map_string_int64_t import MapStringInt64THelper
from dh__map_string_int64_t import MapStringInt64TProxy
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from map_record import MapRecord

class MapRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_map_record_f1(cself):
        try:
            _ret = CPyObjectProxy.fromPy(MapStringInt64THelper.c_data_set, MapStringInt64TProxy(CPyRecord.toPy(None, cself).map))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_map_record_f2(cself):
        try:
            _ret = CPyObjectProxy.fromPy(MapInt32TInt32THelper.c_data_set, MapInt32TInt32TProxy(CPyRecord.toPy(None, cself).imap))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(struct DjinniObjectHandle *,struct DjinniObjectHandle *)")
    def python_create_map_record(map,imap):
        py_rec = MapRecord(
            CPyObjectProxy.toPyObj(MapStringInt64THelper.c_data_set, map),
            CPyObjectProxy.toPyObj(MapInt32TInt32THelper.c_data_set, imap))
        return CPyRecord.fromPy(MapRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in MapRecord.c_data_set
        MapRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.map_record_add_callback_get_map_record_f1(MapRecordHelper.get_map_record_f1)
        lib.map_record_add_callback___delete(MapRecordHelper.__delete)
        lib.map_record_add_callback_python_create_map_record(MapRecordHelper.python_create_map_record)
        lib.map_record_add_callback_get_map_record_f2(MapRecordHelper.get_map_record_f2)

MapRecordHelper._add_callbacks()

