# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_enum_interface.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyEnum

from abc import ABCMeta, abstractmethod
from color import Color
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class FooEnumInterface(with_metaclass(ABCMeta)):
    @abstractmethod
    def set_enum(self, some_color):
        """ Returns record of given string """
        raise NotImplementedError

    @abstractmethod
    def get_enum(self):
        raise NotImplementedError

    @abstractmethod
    def set_optional_enum(self, some_color):
        raise NotImplementedError

    @abstractmethod
    def get_optional_enum(self):
        raise NotImplementedError

    @staticmethod
    def create():
        return FooEnumInterfaceCppProxy.create()

class FooEnumInterfaceCppProxy(FooEnumInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.foo_enum_interface___wrapper_dec_ref(self._cpp_impl)

    def set_enum(self, some_color):
        lib.cw__foo_enum_interface_set_enum(self._cpp_impl, CPyEnum.fromPy(some_color))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_enum(self):
        _ret_c = lib.cw__foo_enum_interface_get_enum(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyEnum.toPy(Color, _ret_c)
        assert _ret.value != -1
        return _ret

    def set_optional_enum(self, some_color):
        lib.cw__foo_enum_interface_set_optional_enum(self._cpp_impl, CPyEnum.fromPyOpt(some_color))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_optional_enum(self):
        _ret_c = lib.cw__foo_enum_interface_get_optional_enum(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyEnum.toPyOpt(Color, _ret_c)
        return _ret

    @staticmethod
    def create():
        _ret_c = lib.cw__foo_enum_interface_create()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = FooEnumInterfaceHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

class FooEnumInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return FooEnumInterfaceCppProxy(obj)

