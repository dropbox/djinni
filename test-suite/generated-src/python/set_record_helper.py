# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from set.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyObjectProxy, CPyPrimitive, CPyRecord, CPyString

from dh__set_int32_t import SetInt32THelper
from dh__set_int32_t import SetInt32TProxy
from dh__set_string import SetStringHelper
from dh__set_string import SetStringProxy
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from set_record import SetRecord

class SetRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_set_record_f1(cself):
        try:
            _ret = CPyObjectProxy.fromPy(SetStringHelper.c_data_set, SetStringProxy(CPyRecord.toPy(None, cself).set))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_set_record_f2(cself):
        try:
            _ret = CPyObjectProxy.fromPy(SetInt32THelper.c_data_set, SetInt32TProxy(CPyRecord.toPy(None, cself).iset))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(struct DjinniObjectHandle *,struct DjinniObjectHandle *)")
    def python_create_set_record(set,iset):
        py_rec = SetRecord(
            CPyObjectProxy.toPyObj(SetStringHelper.c_data_set, set),
            CPyObjectProxy.toPyObj(SetInt32THelper.c_data_set, iset))
        return CPyRecord.fromPy(SetRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in SetRecord.c_data_set
        SetRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.set_record_add_callback_python_create_set_record(SetRecordHelper.python_create_set_record)
        lib.set_record_add_callback_get_set_record_f1(SetRecordHelper.get_set_record_f1)
        lib.set_record_add_callback_get_set_record_f2(SetRecordHelper.get_set_record_f2)
        lib.set_record_add_callback___delete(SetRecordHelper.__delete)

SetRecordHelper._add_callbacks()

