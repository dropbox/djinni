# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from client_interface.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyBinary, CPyPrimitive, CPyRecord, CPyString

from abc import ABCMeta, abstractmethod
from client_returned_record import ClientReturnedRecord
from client_returned_record_helper import ClientReturnedRecordHelper
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class ClientInterface(with_metaclass(ABCMeta)):
    """ Client interface """

    @abstractmethod
    def get_record(self, record_id, utf8string, misc):
        """ Returns record of given string """
        raise NotImplementedError

    @abstractmethod
    def identifier_check(self, data, r, jret):
        raise NotImplementedError

    @abstractmethod
    def return_str(self):
        raise NotImplementedError

    @abstractmethod
    def meth_taking_interface(self, i):
        raise NotImplementedError

    @abstractmethod
    def meth_taking_optional_interface(self, i):
        raise NotImplementedError


class ClientInterfaceCallbacksHelper():
    @ffi.callback("struct DjinniRecordHandle *(struct DjinniObjectHandle * , int64_t, struct DjinniString *, struct DjinniString *)")
    def get_record(cself, record_id, utf8string, misc):
        try:
            _ret = CPyRecord.fromPy(ClientReturnedRecord.c_data_set, ClientInterfaceHelper.selfToPy(cself).get_record(CPyPrimitive.toPy(record_id), CPyString.toPy(utf8string), CPyString.toPyOpt(misc)))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("double(struct DjinniObjectHandle * , struct DjinniBinary *, int32_t, int64_t)")
    def identifier_check(cself, data, r, jret):
        try:
            _ret = CPyPrimitive.fromPy(ClientInterfaceHelper.selfToPy(cself).identifier_check(CPyBinary.toPy(data), CPyPrimitive.toPy(r), CPyPrimitive.toPy(jret)))
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniObjectHandle * )")
    def return_str(cself):
        try:
            with CPyString.fromPy(ClientInterfaceHelper.selfToPy(cself).return_str()) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniObjectHandle * , struct DjinniWrapperClientInterface *)")
    def meth_taking_interface(cself, i):
        try:
            with CPyString.fromPy(ClientInterfaceHelper.selfToPy(cself).meth_taking_interface(ClientInterfaceHelper.toPy(i))) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniObjectHandle * , struct DjinniWrapperClientInterface *)")
    def meth_taking_optional_interface(cself, i):
        try:
            with CPyString.fromPy(ClientInterfaceHelper.selfToPy(cself).meth_taking_optional_interface(ClientInterfaceHelper.toPy(i))) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in ClientInterfaceHelper.c_data_set
        ClientInterfaceHelper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():
        lib.client_interface_add_callback_get_record(ClientInterfaceCallbacksHelper.get_record)
        lib.client_interface_add_callback_identifier_check(ClientInterfaceCallbacksHelper.identifier_check)
        lib.client_interface_add_callback_return_str(ClientInterfaceCallbacksHelper.return_str)
        lib.client_interface_add_callback_meth_taking_interface(ClientInterfaceCallbacksHelper.meth_taking_interface)
        lib.client_interface_add_callback_meth_taking_optional_interface(ClientInterfaceCallbacksHelper.meth_taking_optional_interface)

        lib.client_interface_add_callback___delete(ClientInterfaceCallbacksHelper.__delete)

ClientInterfaceCallbacksHelper._add_callbacks()

class ClientInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        # Python Objects can be returned without being wrapped in proxies
        py_handle = lib.get_handle_from_proxy_object_cw__client_interface(obj)
        if py_handle:
            assert py_handle in ClientInterfaceHelper.c_data_set
            aux = ffi.from_handle(ffi.cast("void * ", py_handle))
            lib.client_interface___wrapper_dec_ref(obj)
            return aux
        return ClientInterfaceCppProxy(obj)

    @staticmethod
    def selfToPy(obj):
        assert obj in ClientInterfaceHelper.c_data_set
        return ffi.from_handle(ffi.cast("void * ",obj))

    @staticmethod
    def fromPy(py_obj):
        if py_obj is None:
            return ffi.NULL
        py_proxy = (py_obj)
        if not hasattr(py_obj, "get_record"):
            raise TypeError
        if not hasattr(py_obj, "identifier_check"):
            raise TypeError
        if not hasattr(py_obj, "return_str"):
            raise TypeError
        if not hasattr(py_obj, "meth_taking_interface"):
            raise TypeError
        if not hasattr(py_obj, "meth_taking_optional_interface"):
            raise TypeError

        bare_c_ptr = ffi.new_handle(py_proxy)
        ClientInterfaceHelper.c_data_set.add(bare_c_ptr)
        wrapped_c_ptr = lib.make_proxy_object_from_handle_cw__client_interface(bare_c_ptr)
        return wrapped_c_ptr
