# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from client_interface.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive, CPyRecord, CPyString
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from client_returned_record import ClientReturnedRecord

class ClientReturnedRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("int64_t(struct DjinniRecordHandle *)")
    def get_client_returned_record_f1(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).record_id)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_client_returned_record_f2(cself):
        try:
            with CPyString.fromPy(CPyRecord.toPy(None, cself).content) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_client_returned_record_f3(cself):
        try:
            with CPyString.fromPyOpt(CPyRecord.toPy(None, cself).misc) as py_obj:
                return py_obj.release_djinni_string()
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(int64_t,struct DjinniString *,struct DjinniString *)")
    def python_create_client_returned_record(record_id,content,misc):
        py_rec = ClientReturnedRecord(
            CPyPrimitive.toPy(record_id),
            CPyString.toPy(content),
            CPyString.toPyOpt(misc))
        return CPyRecord.fromPy(ClientReturnedRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in ClientReturnedRecord.c_data_set
        ClientReturnedRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.client_returned_record_add_callback_get_client_returned_record_f3(ClientReturnedRecordHelper.get_client_returned_record_f3)
        lib.client_returned_record_add_callback_python_create_client_returned_record(ClientReturnedRecordHelper.python_create_client_returned_record)
        lib.client_returned_record_add_callback_get_client_returned_record_f1(ClientReturnedRecordHelper.get_client_returned_record_f1)
        lib.client_returned_record_add_callback___delete(ClientReturnedRecordHelper.__delete)
        lib.client_returned_record_add_callback_get_client_returned_record_f2(ClientReturnedRecordHelper.get_client_returned_record_f2)

ClientReturnedRecordHelper._add_callbacks()

