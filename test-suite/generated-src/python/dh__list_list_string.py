# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_containers.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyString

from dh__list_string import ListStringHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class ListListStringHelper:
    c_data_set = MultiSet()

    @staticmethod
    def check_c_data_set_empty():
        assert len(ListListStringHelper.c_data_set) == 0
        ListStringHelper.check_c_data_set_empty()

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniObjectHandle *, size_t)")
    def __get_elem(cself, index):
        try:
            _ret = CPyObject.fromPy(ListStringHelper.c_data_set, CPyObject.toPy(None, cself)[index])
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("size_t(struct DjinniObjectHandle *)")
    def __get_size(cself):
        return len(CPyObject.toPy(None, cself))

    @ffi.callback("struct DjinniObjectHandle *()")
    def __python_create():
        c_ptr = ffi.new_handle(list())
        ListListStringHelper.c_data_set.add(c_ptr)
        return ffi.cast("struct DjinniObjectHandle *", c_ptr)

    @ffi.callback("void(struct DjinniObjectHandle *, struct DjinniObjectHandle *)")
    def __python_add(cself, el):
        CPyObject.toPy(None, cself).append(CPyObject.toPy(ListStringHelper.c_data_set, el))

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in ListListStringHelper.c_data_set
        ListListStringHelper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():
        lib.list_list_string_add_callback__get_elem(ListListStringHelper.__get_elem)
        lib.list_list_string_add_callback___delete(ListListStringHelper.__delete)
        lib.list_list_string_add_callback__get_size(ListListStringHelper.__get_size)
        lib.list_list_string_add_callback__python_create(ListListStringHelper.__python_create)
        lib.list_list_string_add_callback__python_add(ListListStringHelper.__python_add)

ListListStringHelper._add_callbacks()

