# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_client_interface.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive, CPyRecord, CPyString

from abc import ABCMeta, abstractmethod
from foo_client_returned_record import FooClientReturnedRecord
from foo_client_returned_record_helper import FooClientReturnedRecordHelper
from foo_extensible_record import FooExtensibleRecord
from foo_extensible_record_helper import FooExtensibleRecordHelper
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class FooClientInterface(with_metaclass(ABCMeta)):
    @abstractmethod
    def set_record(self, rec):
        """ Returns record of given string """
        raise NotImplementedError

    @abstractmethod
    def get_record(self):
        raise NotImplementedError

    @abstractmethod
    def set_extensible_record(self, rec):
        raise NotImplementedError

    @abstractmethod
    def get_extensible_record(self):
        raise NotImplementedError

    @abstractmethod
    def get_extensible_record_number2(self):
        raise NotImplementedError

    @abstractmethod
    def get_extensible_record_string2(self):
        raise NotImplementedError

    @staticmethod
    def create():
        return FooClientInterfaceCppProxy.create()

class FooClientInterfaceCppProxy(FooClientInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.foo_client_interface___wrapper_dec_ref(self._cpp_impl)

    def set_record(self, rec):
        lib.cw__foo_client_interface_set_record(self._cpp_impl, CPyRecord.fromPy(FooClientReturnedRecord.c_data_set, rec))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_record(self):
        _ret_c = lib.cw__foo_client_interface_get_record(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(FooClientReturnedRecord.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    def set_extensible_record(self, rec):
        lib.cw__foo_client_interface_set_extensible_record(self._cpp_impl, CPyRecord.fromPy(FooExtensibleRecord.c_data_set, rec))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_extensible_record(self):
        _ret_c = lib.cw__foo_client_interface_get_extensible_record(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(FooExtensibleRecord.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    def get_extensible_record_number2(self):
        _ret_c = lib.cw__foo_client_interface_get_extensible_record_number2(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def get_extensible_record_string2(self):
        _ret_c = lib.cw__foo_client_interface_get_extensible_record_string2(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyString.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def create():
        _ret_c = lib.cw__foo_client_interface_create()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = FooClientInterfaceHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

class FooClientInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return FooClientInterfaceCppProxy(obj)

