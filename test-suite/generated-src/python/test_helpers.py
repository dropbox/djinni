# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from test.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyBinary, CPyBoxedI32, CPyEnum, CPyObject, CPyObjectProxy, CPyPrimitive, CPyRecord, CPyString

from abc import ABCMeta, abstractmethod
from assorted_primitives import AssortedPrimitives
from assorted_primitives_helper import AssortedPrimitivesHelper
from client_interface import ClientInterface
from client_interface import ClientInterfaceHelper
from color import Color
from dh__map_enum_color_string import MapEnumColorStringHelper
from dh__map_enum_color_string import MapEnumColorStringProxy
from dh__map_string_int64_t import MapStringInt64THelper
from dh__map_string_int64_t import MapStringInt64TProxy
from future.utils import with_metaclass
from map_list_record import MapListRecord
from map_list_record_helper import MapListRecordHelper
from nested_collection import NestedCollection
from nested_collection_helper import NestedCollectionHelper
from primitive_list import PrimitiveList
from primitive_list_helper import PrimitiveListHelper
from set_record import SetRecord
from set_record_helper import SetRecordHelper
from user_token import UserToken
from user_token import UserTokenHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class TestHelpers(with_metaclass(ABCMeta)):
    """
     Helper methods used by various different tests.
     (Second line of multi-line documentation.
       Indented third line of multi-line documentation.)
    """

    @staticmethod
    def get_set_record():
        """ Method with documentation """
        return TestHelpersCppProxy.get_set_record()
    @staticmethod
    def check_set_record(rec):
        """
         Method with long documentation
         (Second line of multi-line documentation.
           Indented third line of multi-line documentation.)
        """
        return TestHelpersCppProxy.check_set_record(rec)
    @staticmethod
    def get_primitive_list():
        return TestHelpersCppProxy.get_primitive_list()
    @staticmethod
    def check_primitive_list(pl):
        return TestHelpersCppProxy.check_primitive_list(pl)
    @staticmethod
    def get_nested_collection():
        return TestHelpersCppProxy.get_nested_collection()
    @staticmethod
    def check_nested_collection(nc):
        return TestHelpersCppProxy.check_nested_collection(nc)
    @staticmethod
    def get_map():
        return TestHelpersCppProxy.get_map()
    @staticmethod
    def check_map(m):
        return TestHelpersCppProxy.check_map(m)
    @staticmethod
    def get_empty_map():
        return TestHelpersCppProxy.get_empty_map()
    @staticmethod
    def check_empty_map(m):
        return TestHelpersCppProxy.check_empty_map(m)
    @staticmethod
    def get_map_list_record():
        return TestHelpersCppProxy.get_map_list_record()
    @staticmethod
    def check_map_list_record(m):
        return TestHelpersCppProxy.check_map_list_record(m)
    @staticmethod
    def check_client_interface_ascii(i):
        TestHelpersCppProxy.check_client_interface_ascii(i)
    @staticmethod
    def check_client_interface_nonascii(i):
        TestHelpersCppProxy.check_client_interface_nonascii(i)
    @staticmethod
    def check_client_interface_args(i):
        TestHelpersCppProxy.check_client_interface_args(i)
    @staticmethod
    def check_enum_map(m):
        TestHelpersCppProxy.check_enum_map(m)
    @staticmethod
    def check_enum(c):
        TestHelpersCppProxy.check_enum(c)
    @staticmethod
    def token_id(t):
        return TestHelpersCppProxy.token_id(t)
    @staticmethod
    def create_cpp_token():
        return TestHelpersCppProxy.create_cpp_token()
    @staticmethod
    def check_cpp_token(t):
        TestHelpersCppProxy.check_cpp_token(t)
    @staticmethod
    def cpp_token_id(t):
        return TestHelpersCppProxy.cpp_token_id(t)
    @staticmethod
    def check_token_type(t, type):
        TestHelpersCppProxy.check_token_type(t, type)
    @staticmethod
    def return_none():
        return TestHelpersCppProxy.return_none()
    @staticmethod
    def assorted_primitives_id(i):
        """ Ensures that we generate integer translation code """
        return TestHelpersCppProxy.assorted_primitives_id(i)
    @staticmethod
    def id_binary(b):
        return TestHelpersCppProxy.id_binary(b)

class TestHelpersCppProxy(TestHelpers):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.test_helpers___wrapper_dec_ref(self._cpp_impl)

    @staticmethod
    def get_set_record():
        _ret_c = lib.cw__test_helpers_get_set_record()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(SetRecord.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_set_record(rec):
        _ret_c = lib.cw__test_helpers_check_set_record(CPyRecord.fromPy(SetRecord.c_data_set, rec))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def get_primitive_list():
        _ret_c = lib.cw__test_helpers_get_primitive_list()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(PrimitiveList.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_primitive_list(pl):
        _ret_c = lib.cw__test_helpers_check_primitive_list(CPyRecord.fromPy(PrimitiveList.c_data_set, pl))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def get_nested_collection():
        _ret_c = lib.cw__test_helpers_get_nested_collection()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(NestedCollection.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_nested_collection(nc):
        _ret_c = lib.cw__test_helpers_check_nested_collection(CPyRecord.fromPy(NestedCollection.c_data_set, nc))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def get_map():
        _ret_c = lib.cw__test_helpers_get_map()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObjectProxy.toPyObj(MapStringInt64THelper.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_map(m):
        _ret_c = lib.cw__test_helpers_check_map(CPyObjectProxy.fromPy(MapStringInt64THelper.c_data_set, MapStringInt64TProxy(m)))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def get_empty_map():
        _ret_c = lib.cw__test_helpers_get_empty_map()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObjectProxy.toPyObj(MapStringInt64THelper.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_empty_map(m):
        _ret_c = lib.cw__test_helpers_check_empty_map(CPyObjectProxy.fromPy(MapStringInt64THelper.c_data_set, MapStringInt64TProxy(m)))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def get_map_list_record():
        _ret_c = lib.cw__test_helpers_get_map_list_record()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(MapListRecord.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_map_list_record(m):
        _ret_c = lib.cw__test_helpers_check_map_list_record(CPyRecord.fromPy(MapListRecord.c_data_set, m))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_client_interface_ascii(i):
        lib.cw__test_helpers_check_client_interface_ascii(ClientInterfaceHelper.fromPy(i))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def check_client_interface_nonascii(i):
        lib.cw__test_helpers_check_client_interface_nonascii(ClientInterfaceHelper.fromPy(i))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def check_client_interface_args(i):
        lib.cw__test_helpers_check_client_interface_args(ClientInterfaceHelper.fromPy(i))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def check_enum_map(m):
        lib.cw__test_helpers_check_enum_map(CPyObjectProxy.fromPy(MapEnumColorStringHelper.c_data_set, MapEnumColorStringProxy(m)))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def check_enum(c):
        lib.cw__test_helpers_check_enum(CPyEnum.fromPy(c))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def token_id(t):
        _ret_c = lib.cw__test_helpers_token_id(UserTokenHelper.fromPy(t))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = UserTokenHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def create_cpp_token():
        _ret_c = lib.cw__test_helpers_create_cpp_token()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = UserTokenHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_cpp_token(t):
        lib.cw__test_helpers_check_cpp_token(UserTokenHelper.fromPy(t))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def cpp_token_id(t):
        _ret_c = lib.cw__test_helpers_cpp_token_id(UserTokenHelper.fromPy(t))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def check_token_type(t, type):
        with CPyString.fromPy(type) as pys_type:
            lib.cw__test_helpers_check_token_type(UserTokenHelper.fromPy(t), pys_type.release_djinni_string())
            CPyException.toPyCheckAndRaise(ffi.NULL)

    @staticmethod
    def return_none():
        _ret_c = lib.cw__test_helpers_return_none()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyBoxedI32.toPyOpt(_ret_c)
        return _ret

    @staticmethod
    def assorted_primitives_id(i):
        _ret_c = lib.cw__test_helpers_assorted_primitives_id(CPyRecord.fromPy(AssortedPrimitives.c_data_set, i))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(AssortedPrimitives.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def id_binary(b):
        with CPyBinary.fromPy(b) as pybin_b:
            _ret_c = lib.cw__test_helpers_id_binary(pybin_b.release_djinni_binary())
            CPyException.toPyCheckAndRaise(_ret_c)
            _ret = CPyBinary.toPy(_ret_c)
            assert _ret is not None
            return _ret

class TestHelpersHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return TestHelpersCppProxy(obj)

