# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_constants.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyBoxedI32, CPyPrimitive, CPyRecord, CPyString

from some_const_record import SomeConstRecord
from some_const_record_helper import SomeConstRecordHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from foo_constants import FooConstants

class FooConstantsHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("int32_t(struct DjinniRecordHandle *)")
    def get_foo_constants_f1(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).some_integer)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_foo_constants_f2(cself):
        try:
            with CPyString.fromPy(CPyRecord.toPy(None, cself).some_string) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(int32_t,struct DjinniString *)")
    def python_create_foo_constants(some_integer,some_string):
        py_rec = FooConstants(
            CPyPrimitive.toPy(some_integer),
            CPyString.toPy(some_string))
        return CPyRecord.fromPy(FooConstants.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in FooConstants.c_data_set
        FooConstants.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.foo_constants_add_callback_get_foo_constants_f1(FooConstantsHelper.get_foo_constants_f1)
        lib.foo_constants_add_callback_python_create_foo_constants(FooConstantsHelper.python_create_foo_constants)
        lib.foo_constants_add_callback_get_foo_constants_f2(FooConstantsHelper.get_foo_constants_f2)
        lib.foo_constants_add_callback___delete(FooConstantsHelper.__delete)

FooConstants.OBJECT_CONSTANT = FooConstants(
    FooConstants.I32_CONSTANT,
    FooConstants.STRING_CONSTANT)

FooConstants.SOME_RECORD = SomeConstRecord(
    28,
    FooConstants.I16_CONSTANT)


FooConstantsHelper._add_callbacks()

