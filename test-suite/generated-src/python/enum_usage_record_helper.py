# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from enum.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyEnum, CPyObject, CPyObject, CPyObjectProxy, CPyRecord

from color import Color
from dh__list_enum_color import ListEnumColorHelper
from dh__map_enum_color_enum_color import MapEnumColorEnumColorHelper
from dh__map_enum_color_enum_color import MapEnumColorEnumColorProxy
from dh__set_enum_color import SetEnumColorHelper
from dh__set_enum_color import SetEnumColorProxy
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from enum_usage_record import EnumUsageRecord

class EnumUsageRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("int(struct DjinniRecordHandle *)")
    def get_enum_usage_record_f1(cself):
        try:
            _ret = CPyEnum.fromPy(CPyRecord.toPy(None, cself).e)
            assert _ret != -1
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("int(struct DjinniRecordHandle *)")
    def get_enum_usage_record_f2(cself):
        try:
            return CPyEnum.fromPyOpt(CPyRecord.toPy(None, cself).o)
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_enum_usage_record_f3(cself):
        try:
            _ret = CPyObject.fromPy(ListEnumColorHelper.c_data_set, CPyRecord.toPy(None, cself).l)
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_enum_usage_record_f4(cself):
        try:
            _ret = CPyObjectProxy.fromPy(SetEnumColorHelper.c_data_set, SetEnumColorProxy(CPyRecord.toPy(None, cself).s))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniObjectHandle *(struct DjinniRecordHandle *)")
    def get_enum_usage_record_f5(cself):
        try:
            _ret = CPyObjectProxy.fromPy(MapEnumColorEnumColorHelper.c_data_set, MapEnumColorEnumColorProxy(CPyRecord.toPy(None, cself).m))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(int,int,struct DjinniObjectHandle *,struct DjinniObjectHandle *,struct DjinniObjectHandle *)")
    def python_create_enum_usage_record(e,o,l,s,m):
        py_rec = EnumUsageRecord(
            CPyEnum.toPy(Color, e),
            CPyEnum.toPyOpt(Color, o),
            CPyObject.toPy(ListEnumColorHelper.c_data_set, l),
            CPyObjectProxy.toPyObj(SetEnumColorHelper.c_data_set, s),
            CPyObjectProxy.toPyObj(MapEnumColorEnumColorHelper.c_data_set, m))
        return CPyRecord.fromPy(EnumUsageRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in EnumUsageRecord.c_data_set
        EnumUsageRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.enum_usage_record_add_callback_get_enum_usage_record_f2(EnumUsageRecordHelper.get_enum_usage_record_f2)
        lib.enum_usage_record_add_callback_get_enum_usage_record_f3(EnumUsageRecordHelper.get_enum_usage_record_f3)
        lib.enum_usage_record_add_callback_get_enum_usage_record_f4(EnumUsageRecordHelper.get_enum_usage_record_f4)
        lib.enum_usage_record_add_callback___delete(EnumUsageRecordHelper.__delete)
        lib.enum_usage_record_add_callback_get_enum_usage_record_f5(EnumUsageRecordHelper.get_enum_usage_record_f5)
        lib.enum_usage_record_add_callback_python_create_enum_usage_record(EnumUsageRecordHelper.python_create_enum_usage_record)
        lib.enum_usage_record_add_callback_get_enum_usage_record_f1(EnumUsageRecordHelper.get_enum_usage_record_f1)

EnumUsageRecordHelper._add_callbacks()

