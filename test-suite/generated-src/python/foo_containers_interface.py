# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from foo_containers.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyBinary, CPyObject, CPyObject, CPyObjectProxy, CPyPrimitive, CPyRecord, CPyString

from abc import ABCMeta, abstractmethod
from dh__list_binary import ListBinaryHelper
from dh__list_int32_t import ListInt32THelper
from dh__list_record_foo_some_other_record import ListRecordFooSomeOtherRecordHelper
from dh__map_string_int32_t import MapStringInt32THelper
from dh__map_string_int32_t import MapStringInt32TProxy
from foo_containers_record import FooContainersRecord
from foo_containers_record_helper import FooContainersRecordHelper
from foo_some_other_record import FooSomeOtherRecord
from foo_some_other_record_helper import FooSomeOtherRecordHelper
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class FooContainersInterface(with_metaclass(ABCMeta)):
    @abstractmethod
    def set_containers_record(self, rec):
        raise NotImplementedError

    @abstractmethod
    def get_containers_record(self):
        raise NotImplementedError

    @abstractmethod
    def set_optional_containers_record(self, rec):
        raise NotImplementedError

    @abstractmethod
    def get_optional_containers_record(self):
        raise NotImplementedError

    @abstractmethod
    def set_optional_map_string_int(self, m):
        raise NotImplementedError

    @abstractmethod
    def get_optional_map_string_int(self):
        raise NotImplementedError

    @abstractmethod
    def set_optional_list_int(self, m):
        raise NotImplementedError

    @abstractmethod
    def get_optional_list_int(self):
        raise NotImplementedError

    @abstractmethod
    def set_list_record(self, lr):
        raise NotImplementedError

    @abstractmethod
    def set_list_binary(self, lb):
        """get_list_record(): list<foo_some_other_record>; """
        raise NotImplementedError

    @abstractmethod
    def get_list_binary(self):
        raise NotImplementedError

    @staticmethod
    def create():
        """
         Commented out until we figure out the std::hash situation in hpp
        set_set_record(sr: set<foo_some_other_record>);
        get_set_record(): set<foo_some_other_record>;
        """
        return FooContainersInterfaceCppProxy.create()

class FooContainersInterfaceCppProxy(FooContainersInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.foo_containers_interface___wrapper_dec_ref(self._cpp_impl)

    def set_containers_record(self, rec):
        lib.cw__foo_containers_interface_set_containers_record(self._cpp_impl, CPyRecord.fromPy(FooContainersRecord.c_data_set, rec))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_containers_record(self):
        _ret_c = lib.cw__foo_containers_interface_get_containers_record(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(FooContainersRecord.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    def set_optional_containers_record(self, rec):
        lib.cw__foo_containers_interface_set_optional_containers_record(self._cpp_impl, CPyRecord.fromPyOpt(FooContainersRecord.c_data_set, rec))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_optional_containers_record(self):
        _ret_c = lib.cw__foo_containers_interface_get_optional_containers_record(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPyOpt(FooContainersRecord.c_data_set, _ret_c)
        return _ret

    def set_optional_map_string_int(self, m):
        lib.cw__foo_containers_interface_set_optional_map_string_int(self._cpp_impl, CPyObjectProxy.fromPyOpt(MapStringInt32THelper.c_data_set, MapStringInt32TProxy(m)))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_optional_map_string_int(self):
        _ret_c = lib.cw__foo_containers_interface_get_optional_map_string_int(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObjectProxy.toPyObjOpt(MapStringInt32THelper.c_data_set, _ret_c)
        return _ret

    def set_optional_list_int(self, m):
        lib.cw__foo_containers_interface_set_optional_list_int(self._cpp_impl, CPyObject.fromPyOpt(ListInt32THelper.c_data_set, m))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_optional_list_int(self):
        _ret_c = lib.cw__foo_containers_interface_get_optional_list_int(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObject.toPyOpt(ListInt32THelper.c_data_set, _ret_c)
        return _ret

    def set_list_record(self, lr):
        lib.cw__foo_containers_interface_set_list_record(self._cpp_impl, CPyObject.fromPy(ListRecordFooSomeOtherRecordHelper.c_data_set, lr))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def set_list_binary(self, lb):
        lib.cw__foo_containers_interface_set_list_binary(self._cpp_impl, CPyObject.fromPy(ListBinaryHelper.c_data_set, lb))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def get_list_binary(self):
        _ret_c = lib.cw__foo_containers_interface_get_list_binary(self._cpp_impl)
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyObject.toPy(ListBinaryHelper.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def create():
        _ret_c = lib.cw__foo_containers_interface_create()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = FooContainersInterfaceHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

class FooContainersInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return FooContainersInterfaceCppProxy(obj)

