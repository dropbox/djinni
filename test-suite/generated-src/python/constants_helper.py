# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from constants.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyBoxedBool, CPyBoxedF32, CPyBoxedF64, CPyBoxedI16, CPyBoxedI32, CPyBoxedI64, CPyBoxedI8, CPyPrimitive, CPyRecord, CPyString

from constant_record import ConstantRecord
from constant_record_helper import ConstantRecordHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from constants import Constants

class ConstantsHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("struct DjinniRecordHandle *()")
    def python_create_constants():
        py_rec = Constants(
        )
        return CPyRecord.fromPy(Constants.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in Constants.c_data_set
        Constants.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.constants_add_callback_python_create_constants(ConstantsHelper.python_create_constants)
        lib.constants_add_callback___delete(ConstantsHelper.__delete)

Constants.OBJECT_CONSTANT = ConstantRecord(
    Constants.I32_CONSTANT,
    Constants.STRING_CONSTANT)


ConstantsHelper._add_callbacks()

