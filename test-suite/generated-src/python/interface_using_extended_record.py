# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from extended_record.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyRecord

from abc import ABCMeta, abstractmethod
from extended_record import ExtendedRecord
from extended_record_helper import ExtendedRecordHelper
from future.utils import with_metaclass
from record_using_extended_record import RecordUsingExtendedRecord
from record_using_extended_record_helper import RecordUsingExtendedRecordHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class InterfaceUsingExtendedRecord(with_metaclass(ABCMeta)):

    @abstractmethod
    def meth(self, er):
        raise NotImplementedError


InterfaceUsingExtendedRecord.CR = RecordUsingExtendedRecord(
    InterfaceUsingExtendedRecord.CR = ExtendedRecord(
        False)
)


class InterfaceUsingExtendedRecordCppProxy(InterfaceUsingExtendedRecord):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.interface_using_extended_record___wrapper_dec_ref(self._cpp_impl)

    def meth(self, er):
        _ret_c = lib.cw__interface_using_extended_record_meth(self._cpp_impl, CPyRecord.fromPy(ExtendedRecord.c_data_set, er))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyRecord.toPy(ExtendedRecord.c_data_set, _ret_c)
        assert _ret is not None
        return _ret

class InterfaceUsingExtendedRecordHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return InterfaceUsingExtendedRecordCppProxy(obj)

