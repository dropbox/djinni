// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#pragma once

#include <functional>

namespace testsuite {

enum class color : int {
    RED,
    ORANGE,
    YELLOW,
    GREEN,
    BLUE,
    /**
     * "It is customary to list indigo as a color lying between blue and violet, but it has
     * never seemed to me that indigo is worth the dignity of being considered a separate
     * color. To my eyes it seems merely deep blue." --Isaac Asimov
     */
    INDIGO,
    VIOLET,
};
constexpr color operator++(color const& r, int increment) noexcept {
    return color((int)r + increment);
}

}  // namespace testsuite

namespace std {

template <>
struct hash<::testsuite::color> {
    size_t operator()(::testsuite::color type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};
template <>
class numeric_limits<::testsuite::color> : public numeric_limits<int> {
    public:
    static constexpr bool is_specialized = true;
    static constexpr ::testsuite::color min() noexcept { return ::testsuite::color::RED; }
    static constexpr ::testsuite::color max() noexcept { return ::testsuite::color::VIOLET; }
};

}  // namespace std
