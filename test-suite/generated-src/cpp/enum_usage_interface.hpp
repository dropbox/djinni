// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#pragma once

#include "../../handwritten-src/cpp/optional.hpp"
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

namespace testsuite {

enum class color;

class EnumUsageInterface {
public:
    virtual ~EnumUsageInterface() {}

    /**
     * Defines the name of the JNI C++ proxy class. Used to convert a
     * C++ implemented object to a Java object when the type of the object being
     * converted is unknown to the JniInterface (see djinni_support.hpp).
     * 
     * The proxy class name is only used for converting Djinni interfaces that
     * are implemented in C++. Java implemented interfaces are converted differently.
     * However, the C++ class of an interface implemented in Java must still have a
     * jniProxyClassName method in order for Djinni's JniInterface::fromCpp method to compile.
     * 
     * @return The name of the class's associated JNI proxy class.
     * 
     * @see JniInterface in djinni_support.hpp
     */
    virtual const std::string jniProxyClassName() { return "com/dropbox/djinni/test/EnumUsageInterface$CppProxy"; }

    /**
     * Defines the name of the Objective-C type for the class. Used to convert a
     * C++ object to an Objective-C object when the type of the object being
     * converted is unknown to the C++ wrapper cache (see DJICppWrapperCache+Private.hpp).
     * 
     * @return The name of the Objective C type associated with the class.
     * 
     * @see get_cpp_proxy function in DJICppWrapperCache+Private.hpp
     */
    virtual const std::string objcProxyClassName() { return "DBEnumUsageInterfaceCppProxy"; }

    virtual color e(color e) = 0;

    virtual std::experimental::optional<color> o(std::experimental::optional<color> o) = 0;

    virtual std::vector<color> l(const std::vector<color> & l) = 0;

    virtual std::unordered_set<color> s(const std::unordered_set<color> & s) = 0;

    virtual std::unordered_map<color, color> m(const std::unordered_map<color, color> & m) = 0;
};

}  // namespace testsuite
