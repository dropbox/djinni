// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_inheritance.djinni

#pragma once

#include <memory>
#include <string>

namespace testsuite {

class BaseCppInterfaceInheritance;
class BaseObjcJavaInterfaceInheritance;
class SubObjcJavaInterfaceInheritance;

class InterfaceEncapsulator {
public:
    virtual ~InterfaceEncapsulator() {}

    /**
     * Defines the name of the JNI C++ proxy class. Used to convert a
     * C++ implemented object to a Java object when the type of the object being
     * converted is unknown to the JniInterface (see djinni_support.hpp).
     * 
     * The proxy class name is only used for converting Djinni interfaces that
     * are implemented in C++. Java implemented interfaces are converted differently.
     * However, the C++ class of an interface implemented in Java must still have a
     * jniProxyClassName method in order for Djinni's JniInterface::fromCpp method to compile.
     * 
     * @return The name of the class's associated JNI proxy class.
     * 
     * @see JniInterface in djinni_support.hpp
     */
    virtual const std::string jniProxyClassName() { return "com/dropbox/djinni/test/InterfaceEncapsulator$CppProxy"; }

    /**
     * Defines the name of the Objective-C type for the class. Used to convert a
     * C++ object to an Objective-C object when the type of the object being
     * converted is unknown to the C++ wrapper cache (see DJICppWrapperCache+Private.hpp).
     * 
     * @return The name of the Objective C type associated with the class.
     * 
     * @see get_cpp_proxy function in DJICppWrapperCache+Private.hpp
     */
    virtual const std::string objcProxyClassName() { return "DBInterfaceEncapsulator"; }

    virtual void set_cpp_object(const std::shared_ptr<BaseCppInterfaceInheritance> & object) = 0;

    virtual std::shared_ptr<BaseCppInterfaceInheritance> get_cpp_object() = 0;

    virtual std::shared_ptr<BaseCppInterfaceInheritance> sub_cpp_as_base_cpp() = 0;

    virtual void set_objc_java_object(const std::shared_ptr<BaseObjcJavaInterfaceInheritance> & object) = 0;

    virtual std::shared_ptr<BaseObjcJavaInterfaceInheritance> get_objc_java_object() = 0;

    /**
     * Takes a sub interface object through a base interface argument, then cast the argument back to 
     * the sub interface. Returning null signifies failure.
     */
    virtual std::shared_ptr<SubObjcJavaInterfaceInheritance> cast_base_arg_to_sub(const std::shared_ptr<BaseObjcJavaInterfaceInheritance> & subAsBase) = 0;

    static std::shared_ptr<InterfaceEncapsulator> create();
};

}  // namespace testsuite
