// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from foo_receiver.djinni

#pragma once

#include <chrono>
#include <cstdint>
#include <experimental/optional>
#include <memory>
#include <string>
#include <vector>

namespace testsuite {

class FooListener;
class FooListenerBf;
struct FooSomeOtherRecord;

class FooReceiver {
public:
    virtual ~FooReceiver() {}

    virtual std::string set_private_string(const std::string & private_string) = 0;

    virtual std::string get_private_string() = 0;

    virtual std::string cause_changes_string_returned(int32_t i, float f, const std::string & s, const std::vector<uint8_t> & binar, bool b, const std::chrono::system_clock::time_point & d) = 0;

    virtual std::vector<uint8_t> cause_changes_binary_returned(int32_t i, float f, const std::string & s, const std::vector<uint8_t> & binar, bool b, const std::chrono::system_clock::time_point & d) = 0;

    virtual std::chrono::system_clock::time_point cause_changes_date_returned(int32_t i, float f, const std::string & s, const std::vector<uint8_t> & binar, bool b, const std::chrono::system_clock::time_point & d) = 0;

    virtual int32_t cause_changes_int_returned(int32_t i, float f, const std::string & s, const std::vector<uint8_t> & binar, bool b, const std::chrono::system_clock::time_point & d) = 0;

    virtual FooSomeOtherRecord cause_changes_record_returned(int32_t n1, int32_t n2) = 0;

    virtual std::experimental::optional<std::string> cause_changes_string_optional_returned(std::experimental::optional<int32_t> i, float f, const std::experimental::optional<std::string> & s, const std::vector<uint8_t> & binar, bool b, const std::chrono::system_clock::time_point & d) = 0;

    virtual std::experimental::optional<int32_t> cause_changes_int_optional_returned(std::experimental::optional<int32_t> i, float f, const std::experimental::optional<std::string> & s, const std::vector<uint8_t> & binar, bool b, const std::chrono::system_clock::time_point & d) = 0;

    virtual void cause_cpp_exception(const std::string & exception_arg) = 0;

    virtual void cause_py_exception(const std::string & exception_arg) = 0;

    virtual void cause_zero_division_error() = 0;

    virtual void add_listener(const std::shared_ptr<FooListener> & listener) = 0;

    virtual void add_optional_listener(const std::shared_ptr<FooListener> & listener) = 0;

    virtual std::shared_ptr<FooListener> get_optional_listener() = 0;

    /** For testing proxying during bidirectional callbacks */
    virtual std::string set_private_bf_string(const std::string & private_string) = 0;

    virtual void add_listener_bf(const std::shared_ptr<FooListenerBf> & listener) = 0;

    virtual std::shared_ptr<FooListenerBf> get_foo_listener_bf() = 0;

    virtual std::string get_listener_bf_string() = 0;

    virtual void set_listener_bf_in_listener_bf(const std::shared_ptr<FooListenerBf> & listener) = 0;

    virtual std::shared_ptr<FooListenerBf> get_listener_bf_in_listener_bf() = 0;

    virtual void set_binary_in_listener_bf_in_listener_bf(const std::vector<uint8_t> & b) = 0;

    virtual std::vector<uint8_t> get_binary_in_listener_bf_in_listener_bf() = 0;

    virtual std::shared_ptr<FooListenerBf> send_return(const std::shared_ptr<FooListenerBf> & fl_bf) = 0;

    virtual std::shared_ptr<FooListenerBf> in_listener_bf_send_return(const std::shared_ptr<FooListenerBf> & fl_bf) = 0;

    static std::shared_ptr<FooReceiver> create();
};

}  // namespace testsuite
