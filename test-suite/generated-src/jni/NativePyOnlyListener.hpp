// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from single_language_interfaces.djinni

#pragma once

#include "djinni_support.hpp"
#include "py_only_listener.hpp"

namespace djinni_generated {

class NativePyOnlyListener final : ::djinni::JniInterface<::testsuite::PyOnlyListener, NativePyOnlyListener> {
public:
    using CppType = std::shared_ptr<::testsuite::PyOnlyListener>;
    using CppOptType = std::shared_ptr<::testsuite::PyOnlyListener>;
    using JniType = jobject;

    using Boxed = NativePyOnlyListener;

    ~NativePyOnlyListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativePyOnlyListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativePyOnlyListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativePyOnlyListener();
    friend ::djinni::JniClass<NativePyOnlyListener>;
    friend ::djinni::JniInterface<::testsuite::PyOnlyListener, NativePyOnlyListener>;

};

}  // namespace djinni_generated
