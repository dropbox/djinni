// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from token.djinni

#pragma once

#include "djinni_support.hpp"
#include "token.hpp"

namespace djinni { namespace jni {

class NativeToken final : djinni::JniInterface<::djinni::cpp::Token, NativeToken> {
public:
    using CppType = std::shared_ptr<::djinni::cpp::Token>;
    using JniType = jobject;

    static jobject toJava(JNIEnv* jniEnv, std::shared_ptr<::djinni::cpp::Token> c) { return djinni::JniClass<::djinni::jni::NativeToken>::get()._toJava(jniEnv, c); }
    static std::shared_ptr<::djinni::cpp::Token> fromJava(JNIEnv* jniEnv, jobject j) { return djinni::JniClass<::djinni::jni::NativeToken>::get()._fromJava(jniEnv, j); }

    const djinni::GlobalRef<jclass> clazz { djinni::jniFindClass("com/dropbox/djinni/test/Token") };

    class JavaProxy final : djinni::JavaProxyCacheEntry, public ::djinni::cpp::Token {
    public:
        JavaProxy(jobject obj);

    private:
        using djinni::JavaProxyCacheEntry::getGlobalRef;
        friend class djinni::JniInterface<::djinni::cpp::Token, ::djinni::jni::NativeToken>;
        friend class djinni::JavaProxyCache<JavaProxy>;
    };

private:
    NativeToken();
    friend class djinni::JniClass<::djinni::jni::NativeToken>;
};

} }  // namespace djinni::jni
