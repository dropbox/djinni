// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_inheritance.djinni

#pragma once

#include "base_objc_java_interface_inheritance.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeBaseObjcJavaInterfaceInheritance final : ::djinni::JniInterface<::testsuite::BaseObjcJavaInterfaceInheritance, NativeBaseObjcJavaInterfaceInheritance> {
public:
    using CppType = std::shared_ptr<::testsuite::BaseObjcJavaInterfaceInheritance>;
    using CppOptType = std::shared_ptr<::testsuite::BaseObjcJavaInterfaceInheritance>;
    using JniType = jobject;

    using Boxed = NativeBaseObjcJavaInterfaceInheritance;

    ~NativeBaseObjcJavaInterfaceInheritance();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeBaseObjcJavaInterfaceInheritance>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeBaseObjcJavaInterfaceInheritance>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeBaseObjcJavaInterfaceInheritance();
    friend ::djinni::JniClass<NativeBaseObjcJavaInterfaceInheritance>;
    friend ::djinni::JniInterface<::testsuite::BaseObjcJavaInterfaceInheritance, NativeBaseObjcJavaInterfaceInheritance>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::testsuite::BaseObjcJavaInterfaceInheritance
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string base_method() override;
        std::string override_method() override;

    private:
        friend ::djinni::JniInterface<::testsuite::BaseObjcJavaInterfaceInheritance, ::djinni_generated::NativeBaseObjcJavaInterfaceInheritance>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/dropbox/djinni/test/BaseObjcJavaInterfaceInheritance") };
    const jmethodID method_baseMethod { ::djinni::jniGetMethodID(clazz.get(), "baseMethod", "()Ljava/lang/String;") };
    const jmethodID method_overrideMethod { ::djinni::jniGetMethodID(clazz.get(), "overrideMethod", "()Ljava/lang/String;") };
};

}  // namespace djinni_generated
