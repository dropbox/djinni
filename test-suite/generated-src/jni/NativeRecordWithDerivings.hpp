// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from derivings.djinni

#pragma once

#include "djinni_support.hpp"
#include "record_with_derivings.hpp"

namespace djinni { namespace jni {

class NativeRecordWithDerivings final {
public:
    using CppType = ::djinni::cpp::RecordWithDerivings;
    using JniType = jobject;

    static jobject toJava(JNIEnv*, ::djinni::cpp::RecordWithDerivings);
    static ::djinni::cpp::RecordWithDerivings fromJava(JNIEnv*, jobject);

    const djinni::GlobalRef<jclass> clazz { djinni::jniFindClass("com/dropbox/djinni/test/RecordWithDerivings") };
    const jmethodID jconstructor { djinni::jniGetMethodID(clazz.get(), "<init>", "(ILjava/lang/String;)V") };
    const jfieldID field_mKey1 { djinni::jniGetFieldID(clazz.get(), "mKey1", "I") };
    const jfieldID field_mKey2 { djinni::jniGetFieldID(clazz.get(), "mKey2", "Ljava/lang/String;") };

private:
    NativeRecordWithDerivings() {}
    friend class djinni::JniClass<::djinni::jni::NativeRecordWithDerivings>;
};

} }  // namespace djinni::jni
