// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from parcelable.djinni

#include "NativeParcelableOptionalMap.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeParcelableOptionalMap::NativeParcelableOptionalMap() = default;

NativeParcelableOptionalMap::~NativeParcelableOptionalMap() = default;

auto NativeParcelableOptionalMap::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeParcelableOptionalMap>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::Map<::djinni::String, ::djinni::Set<::djinni::String>>>::fromCpp(jniEnv, c.optional_set)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeParcelableOptionalMap::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 2);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeParcelableOptionalMap>::get();
    return {::djinni::Optional<std::experimental::optional, ::djinni::Map<::djinni::String, ::djinni::Set<::djinni::String>>>::toCpp(jniEnv, (jniEnv->GetObjectField(j, data.field_mOptionalSet)))};
}

}  // namespace djinni_generated
